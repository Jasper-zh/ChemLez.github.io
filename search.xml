<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对小木虫考研调剂信息的爬取</title>
      <link href="/2020/04/09/%E5%AF%B9%E5%B0%8F%E6%9C%A8%E8%99%AB%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96/"/>
      <url>/2020/04/09/%E5%AF%B9%E5%B0%8F%E6%9C%A8%E8%99%AB%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><p><strong>由于国家线快出了，故写了一份爬取小木虫网站调剂信息的爬虫代码，方便信息查看。此代码仅用于学习，不作为任何商业用途。</strong></p><a id="more"></a><h3 id="二、代码–单线程"><a href="#二、代码–单线程" class="headerlink" title="二、代码–单线程"></a>二、代码–单线程</h3><details><summary>单线程示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!~/opt/anaconda3/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataInfo</span><span class="params">(infoList, url, pre_params, *args)</span>:</span></span><br><span class="line">    params = []</span><br><span class="line">    count = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        par_ = pre_params[count] + i</span><br><span class="line">        params.append(par_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据参数获取访问链接</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        url += param + <span class="string">'&amp;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取页码数，并处理空页异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pages_tag = soup.find_all(<span class="string">'td'</span>, <span class="string">'header'</span>)[<span class="number">1</span>].string</span><br><span class="line">        pages = int(re.split(<span class="string">'/'</span>, pages_tag)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pages = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判读是否只有一页</span></span><br><span class="line">    <span class="keyword">if</span> pages == <span class="number">0</span>:</span><br><span class="line">        pages += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(pages):  <span class="comment"># 遍历每一页</span></span><br><span class="line">        page = i + <span class="number">1</span></span><br><span class="line">        url = url + <span class="string">'&amp;page='</span> + str(page)</span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tbody = soup.find_all(<span class="string">'tbody'</span>, <span class="string">'forum_body_manage'</span>)[<span class="number">0</span>]</span><br><span class="line">        trs = tbody.find_all(<span class="string">'tr'</span>)  <span class="comment"># 每个学校的全部信息被tr标签包围</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:  <span class="comment"># 遍历每一个学校</span></span><br><span class="line">            dicts = &#123;&#125;</span><br><span class="line">            href = tr.find_all(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)  <span class="comment"># 定位至a标签，提取href的属性值</span></span><br><span class="line">            tds = tr.find_all(<span class="string">'td'</span>)  <span class="comment"># 每个学校的各个信息包含在td标签内</span></span><br><span class="line">            lens = len(tds)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(lens): <span class="comment"># 将各个学校信息添加至字典中</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    title = tds[i].find(<span class="string">'a'</span>).string</span><br><span class="line">                    dicts[i] = title</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dicts[i] = tds[i].string</span><br><span class="line">            dicts[<span class="string">'href'</span>] = href</span><br><span class="line">            print(dicts)</span><br><span class="line">            infoList.append(dicts) <span class="comment"># 每一个学校的信息，添加至列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputCSV</span><span class="params">(infoList, path)</span>:</span></span><br><span class="line">    data = pd.DataFrame(infoList)</span><br><span class="line">    <span class="comment"># with open(r'./info.csv','w+',encoding='utf-8') as f:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        data.columns = [<span class="string">'标题'</span>, <span class="string">'学校'</span>, <span class="string">'门类/专业'</span>, <span class="string">'招生人数'</span>, <span class="string">'发布时间'</span>, <span class="string">'链接'</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'没有调剂信息...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            data.to_csv(path)</span><br><span class="line">            print(<span class="string">'保存成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'路径存在'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'保存失败'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定查询参数 -- 专业、年份</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./2020计算机调剂信息(截止4.09).csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>, <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, pro_1=<span class="string">'0812'</span>,year=<span class="string">'2020'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    getDataInfo(dataList, url, pre_params, *params)</span><br><span class="line">    outputCSV(dataList, path)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></details><h3 id="三、代码–多线程"><a href="#三、代码–多线程" class="headerlink" title="三、代码–多线程"></a>三、代码–多线程</h3><details><summary>多线程示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! ~/opt/anaconda3/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取网页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPages</span><span class="params">(infoList, url, pre_params, *args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取当前需要爬取的页面数，及完整链接</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    params = []</span><br><span class="line">    count = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        par_ = pre_params[count] + i</span><br><span class="line">        params.append(par_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        url += param + <span class="string">'&amp;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理空页异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pages_tag = soup.find_all(<span class="string">'td'</span>, <span class="string">'header'</span>)[<span class="number">1</span>].string</span><br><span class="line">        pages = int(re.split(<span class="string">'/'</span>, pages_tag)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pages = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判读是否只有一页</span></span><br><span class="line">    <span class="keyword">if</span> pages == <span class="number">0</span>:</span><br><span class="line">        pages += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pages, url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">page = <span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataInfo</span><span class="params">(infoList, pages, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取数据信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> page</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        lock.acquire()</span><br><span class="line">        page += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">if</span> page &gt; pages:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        url = url + <span class="string">'&amp;page='</span> + str(page)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># lock.acquire()</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tbody = soup.find_all(<span class="string">'tbody'</span>, <span class="string">'forum_body_manage'</span>)[<span class="number">0</span>]</span><br><span class="line">        trs = tbody.find_all(<span class="string">'tr'</span>)  <span class="comment"># 每个学校的全部信息被tr标签包围</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:  <span class="comment"># 遍历每一个学校</span></span><br><span class="line">            dicts = &#123;&#125;</span><br><span class="line">            href = tr.find_all(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)  <span class="comment"># 定位至a标签，提取href的属性值</span></span><br><span class="line">            tds = tr.find_all(<span class="string">'td'</span>)  <span class="comment"># 每个学校的各个信息包含在td标签内</span></span><br><span class="line">            lens = len(tds)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    title = tds[i].find(<span class="string">'a'</span>).string</span><br><span class="line">                    dicts[i] = title</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dicts[i] = tds[i].string</span><br><span class="line">            dicts[<span class="string">'href'</span>] = href</span><br><span class="line">            print(dicts)</span><br><span class="line">            infoList.append(dicts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputCSV</span><span class="params">(infoList, path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    输出文档</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data = pd.DataFrame(infoList)</span><br><span class="line">    <span class="comment"># with open(r'./info.csv','w+',encoding='utf-8') as f:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        data.columns = [<span class="string">'标题'</span>, <span class="string">'学校'</span>, <span class="string">'门类/专业'</span>, <span class="string">'招生人数'</span>, <span class="string">'发布时间'</span>, <span class="string">'链接'</span>]</span><br><span class="line">        data.sort_values(by=<span class="string">'发布时间'</span>, ascending=<span class="literal">False</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        data = data.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'没有调剂信息...'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            data.to_csv(path)</span><br><span class="line">            print(<span class="string">'爬取成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'路径存在'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'保存失败'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    设定查询参数 -- 专业、年份</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threadingUp</span><span class="params">(count, infoList, pages, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动多线程</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    threadList = []</span><br><span class="line">    iList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">        iList.append(i)</span><br><span class="line">        t = Thread(target=getDataInfo, args=(infoList, pages, url))</span><br><span class="line">        t.start()</span><br><span class="line">        threadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadList:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./08.csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>,  <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, year=<span class="string">'2020'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    count = <span class="number">1000</span></span><br><span class="line">    pages, url_ = getPages(dataList, url, pre_params, *params)</span><br><span class="line">    start = time.time()</span><br><span class="line">    threadingUp(count, dataList, pages, url_)  <span class="comment"># 多线程</span></span><br><span class="line">    <span class="comment"># getDataInfo(dataList,pages,url_) # 单线程</span></span><br><span class="line">    outputCSV(dataList, path)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'时间:'</span>+str(end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></details><h3 id="四、代码使用参数说明"><a href="#四、代码使用参数说明" class="headerlink" title="四、代码使用参数说明"></a>四、代码使用参数说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./data_info.csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>, <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, pro_1=<span class="string">'0801'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    getDataInfo(dataList, url, pre_params, *params)</span><br><span class="line">    outputCSV(dataList, path)</span><br></pre></td></tr></table></figure><p>主体代码已写完，只需要修改main函数中<code>params</code>中的相关参数，即可使用。</p><p><code>parameters</code>函数主要用于返回查询的参数。默认参数都为空。如果都不填，则是爬取小木虫全部年份，全部专业的所有调剂信息。</p><p><code>params</code>具体参数说明：</p><ul><li><p><code>pro_</code></p><p>所要查询的学科门类。可查询的见下图:</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/Ghfaa6.png" style="zoom:60%;" /><p>只要查询填写对应学科门类前的数字即可。例如工学，则:<code>pro_=&#39;08&#39;</code></p><p><strong>注意:填写的为字符串格式</strong></p></li><li><p><code>pro_1</code></p><p>填写的一级学科代码。如下图：</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfBGD.png" style="zoom:40%;" /><p>以电子科学与技术为例，同样只需要填写前面代码即可。如：<code>pro_2=&#39;0806&#39;</code></p><p>如果这一项不填，则查询的是前一个填写的整个学科门类所有信息。</p></li><li><p><code>pro_2</code></p><p>填写的二级学科代码。如图:</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfdIK.png" alt=""></p><p>例如查询物理电子学调剂信息，同上。则填:<code>pro_2=&#39;080901&#39;</code>。如果不填，则默认查询的是上一级学科下的所有调剂信息。例如，这里就是全部的电子科学与技术的调剂信息。</p></li><li><p><code>year</code></p><p>查询年份。例如查询2020年。<code>year=&#39;2020&#39;</code>。<strong>注意:同样是字符串类型</strong>。如果不填，则是查询全部的年份。</p><p>其中，<code>main()</code>函数中的保存路径<code>path</code>,可自定义修改。</p></li></ul><p><strong>总结:</strong>只需修改<code>params</code>和保存路径<code>url</code>即可。</p><h3 id="五、效果图"><a href="#五、效果图" class="headerlink" title="五、效果图"></a>五、效果图</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfDRe.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/Ghf0PO.png" alt=""></p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>小木虫调剂信息网站:<a href="http://muchong.com/bbs/kaoyan.php" target="_blank" rel="noopener">http://muchong.com/bbs/kaoyan.php</a></p><btns rounded grid5><a href='https://github.com/ChemLez/xmcTiaoJiInformation_Pachong' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Request </tag>
            
            <tag> Beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习:特征工程之数据预处理</title>
      <link href="/2020/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2020/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在上一节中的<btn><a href="https://www.liizhi.cn/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/">泰坦尼克号入门案例</a></btn>的数据预处理过程中，出现了数据不完整、数据的编码(数值转化)，即将非结构化文本转化为结构化文本。本文主要用来记录在<code>sklearn</code>中常用的数据预处理基本方法。</p><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>从数据中检测，纠正或删除损坏，不准确或不适用于模型的记录的过程。</p><p>可能面对的问题有：数据类型不同，比如有的是文字，有的是数字，有的含时间序列，有的连续，有的间断。也可能，数据的质量不行，有噪声，有异常，有缺失，数据出错，量纲不一，有重复，数据是偏态，数据量太大或太小。</p><p>目的：让数据适应模型，匹配模型的需求。</p><a id="more"></a><h4 id="1-数据无量纲化"><a href="#1-数据无量纲化" class="headerlink" title="1. 数据无量纲化"></a>1. 数据无量纲化</h4><p>在机器学习算法实践中，往往有着将不同规格的数据转换到同一规格，或不同分布的数据转换到某个特定分布的需求，这种需求统称为将数据“无量纲化”。 </p><p>数据的无量纲化包括线性与非线性。其中线性的无量纲化包括：<strong>中心化</strong>(Zero-centered或Mean-subtraction)处理和<strong>缩放处理</strong>(Scale)。</p><ol><li><p><strong>中心化</strong></p><p>让所有记录减去一个固定值，即让数据的样本数据平移到某个位置。</p></li><li><p><strong>缩放处理</strong></p><p>通过除以一个固定值，将数据固定在某个范围之中，通常采用取对数的方式。</p></li></ol><h5 id="1-1-数据归一化"><a href="#1-1-数据归一化" class="headerlink" title="1.1 数据归一化"></a>1.1 数据归一化</h5><p>当数据(x)按照最小值中心化后，再按极差（最大值-最小值）缩放，数据移动了最小值个单位，并且会被收敛到[0,1]之间，而这个过程，就叫做<strong>数据归一化</strong>(Normalization，又称Min-MaxScaling)。公式如下：</p><p>​                                                                            $$x={x^*-min(x)\over max(x)-min(x)}$$</p><p>在<code>sklearn</code>中通过<code>preprocessing.MinMaxScaler</code>实现此功能。其中，<code>feature_range</code>可以控制数据压缩的范围，默认为[0,1]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-0.5</span>,<span class="number">6</span>],[<span class="number">0</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">18</span>]]</span><br><span class="line">pd.DataFrame(data)</span><br><span class="line"><span class="comment"># 实现归一化</span></span><br><span class="line">scaler = MinMaxScaler() <span class="comment"># 实例化</span></span><br><span class="line">scaler = scaler.fit(data) <span class="comment"># 生成min(x),max(x)</span></span><br><span class="line">result = scaler.transform(data) <span class="comment"># 导出结果</span></span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">0.</span>  , <span class="number">0.</span>  ],</span><br><span class="line">       [<span class="number">0.25</span>, <span class="number">0.25</span>],</span><br><span class="line">   [<span class="number">0.5</span> , <span class="number">0.5</span> ],</span><br><span class="line">       [<span class="number">1.</span>  , <span class="number">1.</span>  ]])</span><br></pre></td></tr></table></figure><p>将所有的数据压缩至[0,1]之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scaler.inverse_transform(result) <span class="comment">#逆转结果</span></span><br><span class="line">Out:</span><br><span class="line">array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">          [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><p>采用<code>feature_range</code>将数据范围压缩至[0,5]之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用MinMaxScaler的参数feature_range实现将数据归一化到[0,1]以外的范围中</span></span><br><span class="line">data = [[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-0.5</span>,<span class="number">6</span>],[<span class="number">0</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">18</span>]]</span><br><span class="line">scaler = MinMaxScaler(feature_range=[<span class="number">5</span>,<span class="number">10</span>]) <span class="comment"># 实例化归一化到5~10之间</span></span><br><span class="line">result = scaler.fit_transform(data)</span><br><span class="line">result</span><br><span class="line">Out：</span><br><span class="line">    array([[ <span class="number">5.</span>  ,  <span class="number">5.</span>  ],</span><br><span class="line">           [ <span class="number">6.25</span>,  <span class="number">6.25</span>],</span><br><span class="line">           [ <span class="number">7.5</span> ,  <span class="number">7.5</span> ],</span><br><span class="line">           [<span class="number">10.</span>  , <span class="number">10.</span>  ]])</span><br></pre></td></tr></table></figure><p>采用<code>Numpy</code>实现归一化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用numpy来实现归一化</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.array(data)</span><br><span class="line">X</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br><span class="line">X_nor = (X - X.min(axis=<span class="number">0</span>))/(X.max(axis=<span class="number">0</span>) - X.min(axis=<span class="number">0</span>))</span><br><span class="line">X_nor</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0.</span>  , <span class="number">0.</span>  ],</span><br><span class="line">           [<span class="number">0.25</span>, <span class="number">0.25</span>],</span><br><span class="line">           [<span class="number">0.5</span> , <span class="number">0.5</span> ],</span><br><span class="line">           [<span class="number">1.</span>  , <span class="number">1.</span>  ]])</span><br><span class="line"><span class="comment"># 还原,即：公式的还原</span></span><br><span class="line">X = X_nor * (X.max(axis=<span class="number">0</span>) - X.min(axis=<span class="number">0</span>)) + X.min(axis=<span class="number">0</span>)</span><br><span class="line">X</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><p>通过以上的实例，将数据压缩至统一的范围内。</p><h5 id="1-2-数据标准化"><a href="#1-2-数据标准化" class="headerlink" title="1.2 数据标准化"></a>1.2 数据标准化</h5><p>当数据(x)按均值(μ)中心化后，再按标准差(σ)缩放，数据就会服从为均值为0，方差为1的正态分布（即标准正态分布），而这个过程，就叫做<strong>数据标准化</strong>(Standardization，又称Z-scorenormalization)，公式如下：</p><p>​                                                                            $$x^*={x-u\over \sigma} $$</p><p><code>sklearn</code>中提供了<code>preprocessing.StandarScaler</code>接口进行使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler() <span class="comment"># 实例化</span></span><br><span class="line">scaler.fit(data) <span class="comment"># fit,本质用于生成均值和方差</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对每一列向量表示一个特征，故默认对列进行操作</span></span><br><span class="line">scaler.mean_ <span class="comment"># 查看均值的属性mean_</span></span><br><span class="line">scaler.var_  <span class="comment"># 查看方差的属性var_</span></span><br><span class="line">Out:</span><br><span class="line">array([<span class="number">-0.125</span>,  <span class="number">9.</span>   ])</span><br></pre></td></tr></table></figure><p>导出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出结果</span></span><br><span class="line">x_std = scaler.transform(data)</span><br><span class="line">x_std</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.18321596</span>, <span class="number">-1.18321596</span>],</span><br><span class="line">           [<span class="number">-0.50709255</span>, <span class="number">-0.50709255</span>],</span><br><span class="line">           [ <span class="number">0.16903085</span>,  <span class="number">0.16903085</span>],</span><br><span class="line">           [ <span class="number">1.52127766</span>,  <span class="number">1.52127766</span>]])</span><br></pre></td></tr></table></figure><p>查看其方差与均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果均值为0，方差为1的标准正态分布</span></span><br><span class="line">x_std.mean()</span><br><span class="line">x_std.std()</span><br></pre></td></tr></table></figure><p>逆标准化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scaler.inverse_transform(x_std) <span class="comment"># 使用inverse_transform逆标准化</span></span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><h5 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h5><p><strong>目的：</strong>为了把不同来源的数据（不同特征）统一到同一数量级（一个参考坐标系）下，消除指标之间的量纲影响，解决数据指标简单可比性问题。</p><p><strong>优点：</strong></p><ul><li>提高精度</li><li>可提高梯度下降求最优解的速度</li></ul><h4 id="2-数据缺失值的处理"><a href="#2-数据缺失值的处理" class="headerlink" title="2. 数据缺失值的处理"></a>2. 数据缺失值的处理</h4><p>此小节记录对于<code>sklearn</code>中缺失值处理的基本方法。</p><p>导入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">r'/jupyter-notebook/sklearn/2- Feature Engineering/Narrativedata.csv'</span>,index_col=<span class="number">0</span>)</span><br><span class="line">data.head()</span><br><span class="line">data.info()</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">Int64Index</span>:</span> <span class="number">891</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">4</span> columns):</span><br><span class="line">    Age         <span class="number">714</span> non-null float64</span><br><span class="line">    Sex         <span class="number">891</span> non-null object</span><br><span class="line">    Embarked    <span class="number">889</span> non-null object</span><br><span class="line">    Survived    <span class="number">891</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">1</span>), object(<span class="number">3</span>)</span><br><span class="line">    memory usage: <span class="number">34.8</span>+ KB</span><br></pre></td></tr></table></figure><p>从以上结果中可以看出，共有891条数据，其中<code>Age</code>,<code>Embarked</code>皆存在缺失值。<code>sklearn</code>中提供了<code>sklearn.impute.SimpleImputer</code>接口处理缺失值。</p><p>首先对Age缺失值处理方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line">Age = data.loc[:,<span class="string">'Age'</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">imp_mean = SimpleImputer() <span class="comment"># 实例化,默认均值填补</span></span><br><span class="line">imp_median = SimpleImputer(strategy=<span class="string">'median'</span>) <span class="comment"># 采取中位数填补</span></span><br><span class="line">imp_0 = SimpleImputer(strategy=<span class="string">'constant'</span>,fill_value=<span class="number">0</span>) <span class="comment"># 给定常数，以0填补</span></span><br><span class="line">imp_most = SimpleImputer(strategy=<span class="string">'most_frequent'</span>)<span class="comment">#采用众数进行填补，可用于字符串</span></span><br><span class="line">imp_mean = imp_mean.fit(Age)</span><br><span class="line">imp_mean = imp_mean.transform(Age)</span><br><span class="line">imp_median = imp_median.fit_transform(Age)</span><br><span class="line">imp_most = imp_most.fit_transform(Age)</span><br></pre></td></tr></table></figure><p>结果输出，取前5个数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imp_mean[:<span class="number">5</span>]</span><br><span class="line">imp_median[:<span class="number">5</span>]</span><br><span class="line">imp_most[:<span class="number">5</span>]</span><br><span class="line">Out: <span class="comment"># 采用众数进行填补的结果</span></span><br><span class="line">    array([[<span class="number">22.</span>],</span><br><span class="line">           [<span class="number">38.</span>],</span><br><span class="line">           [<span class="number">26.</span>],</span><br><span class="line">           [<span class="number">35.</span>],</span><br><span class="line">           [<span class="number">35.</span>]])</span><br></pre></td></tr></table></figure><p>将众数作为<code>Age</code>缺失值处理的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Age = imp_most</span><br><span class="line">data.loc[:,<span class="string">'Age'</span>] = Age</span><br></pre></td></tr></table></figure><p>对<code>Embarked</code>处理的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用众数填补Embarked</span></span><br><span class="line">Embarked = data.loc[:,<span class="string">'Embarked'</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">imp_most = SimpleImputer(strategy=<span class="string">'most_frequent'</span>)</span><br><span class="line">imp_most = imp_most.fit_transform(Embarked)</span><br><span class="line">Embarked = imp_most</span><br><span class="line">data.loc[:,<span class="string">'Embarked'</span>] = Embarked</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>众数的施加对象可以是非数值型。</p><p><strong>补充：</strong></p><p>采用<code>Pandas</code>和<code>Numpy</code>进行缺失值的填补</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用平均值填补年龄的缺失值,利用.fillna 在DataFrame里面进行填补</span></span><br><span class="line">data_.loc[:,<span class="string">'Age'</span>] = data_.loc[:,<span class="string">'Age'</span>].fillna(data.loc[:,<span class="string">'Age'</span>].mean())</span><br><span class="line"><span class="comment"># 删除Embarked缺失的两条记录,dropna(axis=0)删除所有有缺失值的行，.dropna(axis=1) 删除所有有缺失值的列</span></span><br><span class="line"><span class="comment"># 当采用删除操作时axis=0是对行操作，axis=1是对列操作；拼接，切片相反</span></span><br><span class="line">data_.dropna(axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">data_.info()</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">Int64Index</span>:</span> <span class="number">889</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">4</span> columns):</span><br><span class="line">    Age         <span class="number">889</span> non-null float64</span><br><span class="line">    Sex         <span class="number">889</span> non-null object</span><br><span class="line">    Embarked    <span class="number">889</span> non-null object</span><br><span class="line">    Survived    <span class="number">889</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">1</span>), object(<span class="number">3</span>)</span><br><span class="line">    memory usage: <span class="number">34.7</span>+ KB</span><br></pre></td></tr></table></figure><h4 id="3-编码与哑变量"><a href="#3-编码与哑变量" class="headerlink" title="3. 编码与哑变量"></a>3. 编码与哑变量</h4><p>在机器学习中，大多数算法，譬如逻辑回归，支持向量机SVM，k近邻算法等都只能够处理数值型数据，不能处理文字，在sklearn当中，除了专用来处理文字的算法，其他算法在ﬁt的时候全部要求输入数组或矩阵，也不能够导入文字型数据（其实手写决策树和普斯贝叶斯可以处理文字，但是sklearn中规定必须导入数值型）。<br>然而在现实中，许多标签和特征在数据收集完毕的时候，都不是以数字来表现的。比如说，学历的取值可以是[“小学”，“初中”，“高中”，”大学”]，付费方式可能包含[“支付宝”，“现金”，“微信”]等等。在这种情况下，为了让数据适应算法和库，我们必须将数据进行编码，即是说，将文字型数据转换为数值型。</p><h5 id="3-1-标签的编码"><a href="#3-1-标签的编码" class="headerlink" title="3.1 标签的编码"></a>3.1 标签的编码</h5><p><code>preprocessing.LabelEncoder</code>:标签专用，能够将分类转换为分类数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder <span class="comment"># 对标签进行编码</span></span><br><span class="line">y = data.iloc[:,<span class="number">-1</span>] <span class="comment"># 取出特征，最后一列，标签允许是一维</span></span><br><span class="line">le = LabelEncoder()  <span class="comment"># 实例化</span></span><br><span class="line">le = le.fit(y)</span><br><span class="line">label = le.transform(y)</span><br><span class="line">data.iloc[:,<span class="number">-1</span>] = label</span><br><span class="line">le.classes_ <span class="comment"># 查看标签中类别数量</span></span><br><span class="line">Out:</span><br><span class="line">array([<span class="string">'No'</span>, <span class="string">'Unknown'</span>, <span class="string">'Yes'</span>], dtype=object)</span><br></pre></td></tr></table></figure><p>查看标签<code>Survived</code>这一列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取前5条数据查看</span></span><br><span class="line">data[<span class="string">'Survived'</span>][:<span class="number">5</span>]</span><br><span class="line">Out:</span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">4</span>    <span class="number">0</span></span><br><span class="line">    Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><h5 id="3-2-特征的编码"><a href="#3-2-特征的编码" class="headerlink" title="3.2 特征的编码"></a>3.2 特征的编码</h5><p><code>preprocessing.OrdinalEncoder</code>:特征专用，能够将分类特征转换为分类数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fromsklearn.preprocessingimportOrdinalEncoder </span><br><span class="line"><span class="comment">#接口categories_对应LabelEncoder的接口classes_，一模一样的功能</span></span><br><span class="line">data_=data.copy()</span><br><span class="line">data_.head()</span><br><span class="line">OrdinalEncoder().fit(data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>]).categories_</span><br><span class="line">data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>]=OrdinalEncoder().fit_transform(data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">data_.head()</span><br></pre></td></tr></table></figure><h5 id="3-3-独热编码——创建哑变量"><a href="#3-3-独热编码——创建哑变量" class="headerlink" title="3.3 独热编码——创建哑变量"></a>3.3 独热编码——创建哑变量</h5><p>类别OrdinalEncoder可以用来处理有序变量，但对于名义变量，我们只有使用哑变量的方式来处理，才能够尽量向算法传达最准确的信息。</p><ul><li><p>名义变量</p><p>判断两变量是否相同。例如：性别，邮编，身份证号等等</p></li><li><p>有序变量</p><p>为数据的相对大小提供信息，但数据之间大小的间隔不是具有固定意义的，不能做加减运算。例如：学历。</p></li><li><p>有距变量</p><p>有距变量之间的间隔是有固定意义的，可做加减运算。例如：日期</p></li></ul><p>从以上定义看出，性别、舱门号等属于有序变量。在之前的编码中，性别简单采用的<code>0\1</code>区别<code>男\女</code>。但是，在编码的过程中，想要表达的是<code>男≠女</code>。当被我们转换为<code>[0,1]</code>时，存在着大小关系，即从名义变量的编码转化成为了有距变量的编码。</p><p>故：我们采用独热编码(one-hot)的形式进行编码。男:[1,0],女:[0,1]。这样，便能够将男女的编码区别于一般的0、1编码，让算法明白这两取值是没有计算性质的，这种编码即为哑变量。</p><p>在<code>sklearn</code>中提供了<code>sklearn.preprocessing.OneHotEncoder</code>接口进行哑变量处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line">X = data.iloc[:,<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#取特征,即：Sex、Embarked</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot</span></span><br><span class="line">enc = OneHotEncoder() <span class="comment"># 实例化</span></span><br><span class="line">enc = enc.fit(X)</span><br><span class="line">result = enc.transform(X)</span><br><span class="line">result</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="number">889</span>x5 sparse matrix of type <span class="string">'&lt;class '</span>numpy.float64<span class="string">'&gt;'</span></span><br><span class="line">        <span class="keyword">with</span> <span class="number">1778</span> stored elements <span class="keyword">in</span> Compressed Sparse Row format&gt;</span><br></pre></td></tr></table></figure><p><code>result</code>中返回的是结果集对象地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result.toarray()</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           ...,</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><p>从结果中，看出我们得到5列特征。其中，Sex包含男女两类，Embarked包含S、Q、C三类。故通过One-hot得到了5类特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enc.get_feature_names() <span class="comment"># 用于查看特征默认的名称</span></span><br><span class="line">Out:</span><br><span class="line">    array([<span class="string">'x0_female'</span>, <span class="string">'x0_male'</span>, <span class="string">'x1_C'</span>, <span class="string">'x1_Q'</span>, <span class="string">'x1_S'</span>], dtype=object)</span><br></pre></td></tr></table></figure><p>将新得到的特征表示，拼接至原有数据后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newdata = pd.concat([data,pd.DataFrame(result)],axis=<span class="number">1</span>)<span class="comment"># 将数据进行拼接</span></span><br><span class="line">newdata.drop([<span class="string">'Sex'</span>,<span class="string">'Embarked'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>) <span class="comment"># 删除原来的特征</span></span><br><span class="line">newdata.columns = [<span class="string">'Age'</span>,<span class="string">'Survived'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>,<span class="string">'Embarked_C'</span>,<span class="string">'Embarked_Q'</span>,<span class="string">'Embarked_S'</span>] <span class="comment"># 列名重命名</span></span><br></pre></td></tr></table></figure><h4 id="4-连续型特征处理：二值化与分段"><a href="#4-连续型特征处理：二值化与分段" class="headerlink" title="4. 连续型特征处理：二值化与分段"></a>4. 连续型特征处理：二值化与分段</h4><p>在上一小节的特征处理中，one-hot处理的是离散型变量。根据阈值将数据二值化（将特征值设置为0或1），用于处理连续型变量。大于阈值的值映射为1，而小于或等于阈值的值映射为0。默认阈值为0时，特征中所有的正值都映射到1。</p><p>二值化是对文本计数数据的常见操作，分析人员可以决定仅考虑某种现象的存在与否。它还可以用作考虑布尔随机变量的估计器的预处理步骤（例如，使用贝叶斯设置中的伯努利分布建模）。</p><p><code>sklearn</code>中提供了<code>sklearn.preprocessing.Binarizer</code>用于连续型数据的二值化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Binarizer <span class="comment"># 用于将根阈值将数据二值化，处理连续型变量的工具包</span></span><br><span class="line">data_2 = data.copy()</span><br><span class="line">X = data_2.iloc[:,<span class="number">0</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">transformer = Binarizer(threshold=<span class="number">30</span>).fit_transform(X) <span class="comment"># threshold=30，即以30作为二值化分段的界限</span></span><br><span class="line">transformer[:<span class="number">4</span>]</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0</span>],</span><br><span class="line">           [<span class="number">1</span>],</span><br><span class="line">           [<span class="number">0</span>],</span><br><span class="line">           [<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>从年龄结果的前4条数据看出，年龄大于30的映射为1，小于等于30的映射为0。</p><p><code>sklearn.preprocessing.KBinsDiscretizer</code>可用于设计连续型变量数据的n分类。</p><p>参数解释：</p><table><thead><tr><th align="center">参数</th><th align="left">含义&amp;输入</th></tr></thead><tbody><tr><td align="center">n_bins</td><td align="left">每个特征中分箱的个数，默认5，一次会被运用到所有导入的特征</td></tr><tr><td align="center">ncode</td><td align="left">编码的方式，默认“onehot”<br/>“onehot”：做哑变量，之后返回一个稀疏矩阵，每一列是一个特征中的一个类别，含有该类别的样本表示为1，不含的表示为0 <br/>“ordinal”：每个特征的每个箱都被编码为一个整数，返回每一列是一个特征，每个特征下含有不同整数编码的箱的矩阵<br/>“onehot-dense”：做哑变量，之后返回一个密集数组。</td></tr><tr><td align="center">strategy</td><td align="left">用来定义箱宽的方式，默认”quantile”<br/>“uniform”：表示等宽分箱，即每个特征中的每个箱的最大值之间的差为(特征.max()-特征.min())/(n_bins)<br/>“quantile”：表示等位分箱，即每个特征中的每个箱内的样本数量都相同<br/>“kmeans”：表示按聚类分箱，每个箱中的值到最近的一维k均值聚类的簇心得距离都相同</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> KBinsDiscretizer</span><br><span class="line">X = data.iloc[:,<span class="number">0</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># n_bins 为划分的数量，即需要划分多少类。</span></span><br><span class="line">est = KBinsDiscretizer(n_bins=<span class="number">6</span>,encode=<span class="string">'ordinal'</span>,strategy=<span class="string">'uniform'</span>)</span><br><span class="line">t = est.fit_transform(X)</span><br><span class="line">t[:<span class="number">10</span>]</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">1.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">1.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">4.</span>],</span><br><span class="line">           [<span class="number">0.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">1.</span>]])</span><br><span class="line">set(t.ravel()) <span class="comment"># .ravel() 用于降维，set集合去重，查看类别的数量</span></span><br></pre></td></tr></table></figure><h4 id="5-源码下载"><a href="#5-源码下载" class="headerlink" title="5. 源码下载"></a>5. 源码下载</h4><btns rounded grid5><a href='https://github.com/ChemLez/ML-sklearn/' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sklearn </tag>
            
            <tag> Feature Engineering </tag>
            
            <tag> Data Preprocessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽取JDBCU工具类——JDBCUtils的使用</title>
      <link href="/2020/03/21/%E6%8A%BD%E5%8F%96JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E2%80%94%E2%80%94JDBCUtils%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/21/%E6%8A%BD%E5%8F%96JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E2%80%94%E2%80%94JDBCUtils%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在上一篇介绍<btn><a href="https://www.liizhi.cn/2020/03/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/">JDBC基础使用</a></btn>的博文中，简单了解到JDBC的使用。但是，也看出了一定的弊端：<strong>重复代码量</strong>较大。在我们每次新建一个JDBC的类操作数据库时，都要不停的进行驱动的注册，数据库的连接，参数的输入等大量重复性的操作。所以，有没有什么方法简化这一类的操作呢？<br>其实，将这些重复的代码进行抽取，作为一个工具类，每次使用的时候进行调用即可，这样便能够达到代码的可复用性。<br>抽取JDBC工具类的思路：</p><ol><li>将注册驱动进行抽取</li><li>抽取一个方法获取连接对象<ul><li>需求：不必传递参数，并且保证工具类的通用性。</li><li>解决：配置文件。</li></ul></li></ol><a id="more"></a><h4 id="一、获取连接"><a href="#一、获取连接" class="headerlink" title="一、获取连接"></a>一、获取连接</h4><p>因为我们需要将JDBC抽取为工具类，便于使用。故采取静态方法。</p><h5 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1.注册驱动"></a>1.注册驱动</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于注册驱动，加载</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="2-关闭资源"><a href="#2-关闭资源" class="headerlink" title="2.关闭资源"></a>2.关闭资源</h5><details><summary>关闭资源</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于关闭资源</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               stmt.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               conn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法的重载。当需要对数据库进行查询的操作时，便需要这里的第三个参数，读取完数据后，需要关闭ResultSet占用的资源</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               stmt.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               conn.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               rs.close();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></details><h5 id="3-配置文件的读取"><a href="#3-配置文件的读取" class="headerlink" title="3.配置文件的读取"></a>3.配置文件的读取</h5><p>因为对配置文件的读取，只需要读取一次即可拿到这些值。故采用静态代码块。</p><details><summary>配置文件的读取</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取src路径下的文件的方法--&gt;ClassLoader(类加载器，可以将字节码文件，加载进内存，且内获取src下的资源路径）</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            <span class="comment">// 以当前src为文件绝对路径，获取文件资源的src</span></span><br><span class="line">            <span class="comment">//URL统一资源标识符</span></span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            <span class="comment">//通过getPath获取它的字符串路径</span></span><br><span class="line">            String path = resource.getPath();</span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line">            <span class="comment">// 2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">// 3.获取数据、复制</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h5 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h5><p>配置文件放在当前模块<code>src</code>目录下。文件名后缀为<code>.properties</code>。以下为配置文件可写的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//ip:port/database             //填写数据库的url，例如本地url=jdbc:mysql://localhost:3306/db3</span></span><br><span class="line">user=root  <span class="comment">//数据库用户</span></span><br><span class="line">password=<span class="number">123456</span> <span class="comment">// 用户密码</span></span><br><span class="line">driver=com.mysql.jdbc.Driver    <span class="comment">//注册驱动路径</span></span><br></pre></td></tr></table></figure><h5 id="5-代码总结"><a href="#5-代码总结" class="headerlink" title="5.代码总结"></a>5.代码总结</h5><details><summary>代码总结</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了使Connection方法可以接受到值，故将参数提升到成员变量的位置上</span></span><br><span class="line">    <span class="comment">// 只有静态修饰的变量，才能被静态方法所访问，才能被静态代码块所访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次，即可拿到这些值。使用静态代码块完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取src路径下的文件的方法--&gt;ClassLoader(类加载器，可以将字节码文件，加载进内存，且内获取src下的资源路径）</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            <span class="comment">// 以当前src为文件绝对路径，获取文件资源的src</span></span><br><span class="line">            <span class="comment">//URL统一资源标识符</span></span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            <span class="comment">//通过getPath获取它的字符串路径</span></span><br><span class="line">            String path = resource.getPath();</span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line">            <span class="comment">// 2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">// 3.获取数据、复制</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * 工具类，方便使用，故采用静态方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于注册驱动，加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="二、-JDBCUtils工具类实例使用"><a href="#二、-JDBCUtils工具类实例使用" class="headerlink" title="二、 JDBCUtils工具类实例使用"></a>二、 JDBCUtils工具类实例使用</h4><details><summary>JDBCUtils工具类实例使用</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.li.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection(); <span class="comment">// 获取数据库连接对象</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>; <span class="comment">// 采用预编译的方式，提高效率，预防SQL注入</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql); <span class="comment">// 获取sql执行对象</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">"Tom"</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, <span class="string">"1234"</span>);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">boolean</span> next = rs.next();</span><br><span class="line">            System.out.println(next); <span class="comment">// 判断此用户是否存在</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt, conn, rs); <span class="comment">//资源的释放</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>从以上代码实例中，可以看出我们抽取出的JDBCUtils工具类，大大简化了代码，并且增加了代码的可复用性。当我们需要更改数据库的相关配置时，只需要更改配置文件即可，而我们的JDBCUtils工具类却不用更改。<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] <a href="">Itcast视频讲义</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫基础入门</title>
      <link href="/2020/03/18/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/18/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Requests库的7个主要方法"><a href="#一、Requests库的7个主要方法" class="headerlink" title="一、Requests库的7个主要方法"></a>一、Requests库的7个主要方法</h4><table><thead><tr><th align="left">方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">requests.request()</td><td>构造一个请求，支撑一下各方法的基础方法</td></tr><tr><td align="left">requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td align="left">requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td align="left">requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td align="left">requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td align="left">requests.pathch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td align="left">requests.delete()</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><h5 id="1-requests-get"><a href="#1-requests-get" class="headerlink" title="1.requests.get"></a>1.requests.get</h5><p><code>r = requests.get(url)</code></p><ul><li>返回一个包含服务器资源的Response<strong>对象</strong>，<strong>包含爬虫返回的全部内容</strong>(内容被封装，返回的是地址信息)</li><li>构造一个向服务器请求资源的Request对象</li></ul><p><code>requests.get(url,params=None,**kwargs)</code></p><ul><li><code>url</code>:拟获取网页的<code>url</code>链接</li><li><code>params</code>:url中的额外参数，字典或字节流格式，可选</li><li><code>**kwargs</code>:12个控制访问的参数</li></ul><a id="more"></a><h5 id="2-Response对象的属性"><a href="#2-Response对象的属性" class="headerlink" title="2.Response对象的属性"></a>2.Response对象的属性</h5><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即，url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应的二进制形式</td></tr></tbody></table><ul><li><code>r.encoding</code>:如果header中不存在charset，则认为编码为ISO-8859-1</li><li><code>r.apparent_encoding</code>:根据网页内容分析出的编码方式</li></ul><h5 id="3-理解Requests库的异常"><a href="#3-理解Requests库的异常" class="headerlink" title="3.理解Requests库的异常"></a>3.理解Requests库的异常</h5><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器时异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>Requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr></tbody></table><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>r.raise_for_status</td><td>如果不是200，产生异常requests.HTTPError</td></tr></tbody></table><h5 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'产生异常'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h4 id="二、HTTP协议"><a href="#二、HTTP协议" class="headerlink" title="二、HTTP协议"></a>二、HTTP协议</h4><p><code>HTTP</code>，Hypertext Transfer Protocol,超文本传输协议。</p><p><code>HTTP</code>是一个基于”请求与响应“模式的、无状态的应用层协议。</p><ul><li>无状态：第一次请求与第二次请求无关联</li></ul><p><code>HTTP</code>协议采用URL作为定位网络资源的标识。</p><blockquote><p> URL格式 <code>http://host[:port][path]</code></p></blockquote><ul><li><code>host</code>:合法的Internet主机域名或IP地址</li><li><code>port</code>:端口号，缺省端口为80</li><li><code>path</code>:请求资源的路径</li></ul><p><strong>HTTP URL的理解</strong></p><p>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源。</p><h5 id="1-HTTP协议对资源的操作"><a href="#1-HTTP协议对资源的操作" class="headerlink" title="1.HTTP协议对资源的操作"></a>1.HTTP协议对资源的操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table><h5 id="2-理解PATCH和PUT的区别"><a href="#2-理解PATCH和PUT的区别" class="headerlink" title="2.理解PATCH和PUT的区别"></a>2.理解PATCH和PUT的区别</h5><p>假设URL位置有一组数据UserInfo,包括UserID、UserName等20个字段。</p><p>需求：用户修改了UserName,其他不变。</p><ul><li>采用<code>PATCH</code>,仅向URL提交UserName的局部更新请求。</li><li>采用<code>PUT</code>，必须将所有20个字段一并提交到URL，未提交字段被删除。</li></ul><p><code>PATCH</code>的最主要好处：节省网络带宽</p><h4 id="三、Requests库的7个主要方法解析"><a href="#三、Requests库的7个主要方法解析" class="headerlink" title="三、Requests库的7个主要方法解析"></a>三、Requests库的7个主要方法解析</h4><h5 id="1-requests-request"><a href="#1-requests-request" class="headerlink" title="1.requests.request()"></a>1.requests.request()</h5><p><code>requests.request(method,url,**kwargs)</code></p><p><code>method</code>：请求方式。</p><blockquote><p>‘GET’、’HEAD’、’POST’、’PUT’、’PATCH’、’delete’、’OPTIONS’</p></blockquote><p><code>**kwargs</code>:控制访问的参数，均为可选项。</p><ol><li><code>params</code>:字典或字节序列，作为参数增加到url中。</li><li><code>data</code>：字典、字节序列对象，重点是向服务器提交资源时使用。</li><li><code>json</code>:JSON格式的数据，作为request的内容。</li><li><code>headers</code>:字典，HTTP定制头。</li><li><code>cookies</code>:字典或CookieJar,Request中的cookie。</li><li><code>auth</code>:元祖，支持HTTP认证功能。</li><li><code>files</code>:字典类型，传输文件。</li><li><code>timeout</code>:设定超时时间，秒为单位。</li><li><code>proxies</code>:字典类型，设定访问代理服务器，可以增加登录认证。</li><li><code>allow_redirects</code>:True/False,默认为True，重定向开关。</li><li><code>stream</code>:True/False,默认为True，获取内容立即下载开关。</li><li><code>verify</code>:True/False,默认为True，认证SSL证书开关。</li><li><code>cert</code>:本地SSL证书路径。</li></ol><h4 id="四、Beautiful-Soup库使用"><a href="#四、Beautiful-Soup库使用" class="headerlink" title="四、Beautiful Soup库使用"></a>四、Beautiful Soup库使用</h4><h5 id="1-BeautifulSoup-基本使用"><a href="#1-BeautifulSoup-基本使用" class="headerlink" title="1.BeautifulSoup 基本使用"></a>1.BeautifulSoup 基本使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>) <span class="comment"># 第一个参数为html文本内容，对html标签进行解析</span></span><br></pre></td></tr></table></figure><h5 id="2-Beautiful-Soup库理解"><a href="#2-Beautiful-Soup库理解" class="headerlink" title="2.Beautiful Soup库理解"></a>2.Beautiful Soup库理解</h5><p><code>Beautiful Soup</code>库,也叫做 <code>beautifulsoup4或bs4</code>, 是解析、变量、维护”标签树“的功能库。只要提供的文件是标签类型，<code>Beautiful Soup</code>库都可以用来解析。</p><p>因为文档和标签树是一一对应的，标签树经过<code>Beautiful Soup</code>，转换为<code>Beautiful Soup</code>类型。故，文档和标签树以及<code>Beautiful Soup</code>是一一对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup2 = BeautifulSoup(open(<span class="string">"D://demo.html"</span>,<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><p><code>Beautiful Soup</code>对应一个HTML/XML文档的全部内容。</p><h5 id="3-Beautiful-Soup库解析器"><a href="#3-Beautiful-Soup库解析器" class="headerlink" title="3.Beautiful Soup库解析器"></a>3.Beautiful Soup库解析器</h5><table><thead><tr><th align="left">解析器</th><th>使用方法</th><th>条件</th></tr></thead><tbody><tr><td align="left">bs的HTML解析器</td><td>BeautifulSoup(mk,’html.parser’)</td><td>安装bs4库</td></tr><tr><td align="left">lxml的HTML解析器</td><td>BeautifulSoup(mk,’lxml’)</td><td>pip install lxml</td></tr><tr><td align="left">lxml的XML解析器</td><td>BeautifulSoup(mk,’xml’)</td><td>pip install lxml</td></tr><tr><td align="left">html5lib的解析器</td><td>BeautifulSoup(mk,’htlm5lib’)</td><td>pip install html5lib</td></tr></tbody></table><h5 id="4-Beautiful-Soup类的基本元素"><a href="#4-Beautiful-Soup类的基本元素" class="headerlink" title="4.Beautiful Soup类的基本元素"></a>4.Beautiful Soup类的基本元素</h5><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;表面开头和结尾</td></tr><tr><td>Name</td><td>标签的名称，<p>…</p>的名字是’p’，格式：<tag>.name</td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式：<tag>.attrs</td></tr><tr><td>NavigableString</td><td>标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：<tag>.string</td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;\r\n&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n&lt;a href="http://www.icourse163.org/course/BIT-268001" class="py1" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a href="http://www.icourse163.org/course/BIT-1001870001" class="py2" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;\r\n&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用BeautifulSoup 解析成标签树</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line">soup</span><br><span class="line">&gt;[out]:</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">print(soup.prettify())   <span class="comment"># 输出标签树 </span></span><br><span class="line">&gt;[out]:</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class="title"&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The demo python introduces several python courses.</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="course"&gt;</span><br><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</span><br><span class="line">    Basic Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</span><br><span class="line">    Advanced Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   .</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实例一 Tag</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任何标签都可直接用soup.&lt;标签&gt;将其取出,当文本中存在多个相同标签时，其返回的为第一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line">soup.title <span class="comment"># 标签</span></span><br><span class="line">&gt; &lt;title&gt;This is a python demo page&lt;/title&gt;</span><br><span class="line">tag = soup.a </span><br><span class="line">tag</span><br><span class="line">&gt; &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实例二 Name</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签名称方法 &lt;tag&gt;.name</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">soup.a.name</span><br><span class="line">&gt; <span class="string">'a'</span></span><br><span class="line">soup.a.parent.name <span class="comment"># a的上一层标签,即父标签</span></span><br><span class="line">&gt; <span class="string">'p'</span></span><br></pre></td></tr></table></figure><blockquote><p>实例三 Attributes</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.attrs</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">tag = souo.a <span class="comment"># 取a标签</span></span><br><span class="line">attrs = soup.attrs <span class="comment"># 提取出a标签的属性</span></span><br><span class="line">&gt; &#123;<span class="string">'href'</span>: <span class="string">'http://www.icourse163.org/course/BIT-268001'</span>,</span><br><span class="line"> <span class="string">'class'</span>: [<span class="string">'py1'</span>],</span><br><span class="line"> <span class="string">'id'</span>: <span class="string">'link1'</span>&#125;</span><br><span class="line"><span class="comment"># ，可以从结果看出，是字典的形式，故可直接通过键-值对的形式进一步提取信息内容</span></span><br><span class="line">attrs[<span class="string">'id'</span>]</span><br><span class="line">&gt; <span class="string">'link1'</span></span><br><span class="line">attrs[<span class="string">'href'</span>]</span><br><span class="line">&gt; <span class="string">'http://www.icourse163.org/course/BIT-268001'</span></span><br></pre></td></tr></table></figure><blockquote><p>实例四 NavigableString </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.string 用于取出标签之间的字符串</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">soup.a.string</span><br><span class="line">&gt; <span class="string">'Basic Python'</span></span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'The demo python introduces several python courses.'</span>   （可跨越标签层次）</span><br></pre></td></tr></table></figure><blockquote><p>实例五 判断注释</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.string 用于取出标签之间的字符串</span></span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;b&gt;&lt;! --This is a comment--&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;"</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup.b.string</span><br><span class="line">&gt; <span class="string">'This is not a comment'</span></span><br><span class="line">type(soup.b.string)</span><br><span class="line">&gt; bs4.element.Comment</span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'This is not a comment'</span></span><br><span class="line">type(soup.p.string)</span><br><span class="line">&gt; bs4.element.NavigableString</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两者的类型不同，来判断是否为注释</span></span><br></pre></td></tr></table></figure><h5 id="5-基于Beautiful-Soup-HTML的遍历方法"><a href="#5-基于Beautiful-Soup-HTML的遍历方法" class="headerlink" title="5.基于Beautiful Soup HTML的遍历方法"></a>5.基于Beautiful Soup HTML的遍历方法</h5><p><strong>遍历方法</strong>：标签树，其为树形结构。</p><ul><li>下行遍历</li><li>上行遍历</li><li>平行遍历</li></ul><h6 id="5-1-下行遍历"><a href="#5-1-下行遍历" class="headerlink" title="5.1 下行遍历"></a>5.1 下行遍历</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents</td><td>子节点的列表，将<tag>所有儿子节点存入列表 （返回列表类型）</td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点 （返回迭代类型）</td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有子孙节点，用于循环遍历  （同上）</td></tr></tbody></table><p><strong>本小结实例皆以代码作为开头，不再重复写</strong> <code>&gt;</code>代表输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br></pre></td></tr></table></figure><blockquote><p>实例一    .contents</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">soup.head.contents <span class="comment"># 结果呈现出列表形式</span></span><br><span class="line">&gt;  [&lt;title&gt;This is a python demo page&lt;/title&gt;]</span><br><span class="line"></span><br><span class="line">soup.body.contents <span class="comment"># 查看Body子节点的列表  </span></span><br><span class="line">&gt; </span><br><span class="line">[<span class="string">'\n'</span>,</span><br><span class="line"> &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> &lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;,</span><br><span class="line"> <span class="string">'\n'</span>]</span><br><span class="line"></span><br><span class="line">len(soup.body.contents)</span><br><span class="line">&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">soup.body.contents[<span class="number">1</span>] <span class="comment"># 查看其下行节点的第二个</span></span><br><span class="line">&gt;  &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>标签树的下行遍历</strong></p><ul><li>遍历儿子节点（只遍历一层）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><ul><li>遍历子孙节点（所有节点）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h6 id="5-2-标签树的上行遍历"><a href="#5-2-标签树的上行遍历" class="headerlink" title="5.2 标签树的上行遍历"></a>5.2 标签树的上行遍历</h6><p><strong>基本代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents: <span class="comment"># 对a标签所有的先辈名字进行打印</span></span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)  <span class="comment"># 不存在父亲节，则不打印名称</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name) <span class="comment"># 存在父亲节点，则打印出先辈节点名称</span></span><br><span class="line">        </span><br><span class="line">p</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">[document]</span><br></pre></td></tr></table></figure><h6 id="5-3-标签树的平行遍历"><a href="#5-3-标签树的平行遍历" class="headerlink" title="5.3 标签树的平行遍历"></a>5.3 标签树的平行遍历</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML<strong>文本顺序</strong>的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML<strong>文本顺序</strong>的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML<strong>文本顺序</strong>的后续所有平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML<strong>文本顺序</strong>的前续所有平行节点标签</td></tr></tbody></table><p>注意：平行遍历发生在同一个父节点下的各节点间**</p><blockquote><p>实例一 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">soup.a.next_sibling </span><br><span class="line">&gt; <span class="string">' and '</span></span><br><span class="line"></span><br><span class="line">soup.a.next_sibling.next_sibling   </span><br><span class="line">&gt; &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">soup.a.previous_sibling </span><br><span class="line">&gt; <span class="string">'Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n'</span></span><br><span class="line"></span><br><span class="line">soup.a.previous_sibling.previous_sibling  <span class="comment"># 此时输出为空   </span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">soup.a.parent.name </span><br><span class="line">&gt; <span class="string">'p'</span></span><br></pre></td></tr></table></figure><p><strong>标签树的平行遍历基本代码</strong></p><ul><li>遍历后续节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><ul><li>遍历前续节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><h5 id="6-HTML的格式化输出"><a href="#6-HTML的格式化输出" class="headerlink" title="6.HTML的格式化输出"></a>6.HTML的格式化输出</h5><h6 id="6-1-prettify-方法"><a href="#6-1-prettify-方法" class="headerlink" title="6.1 prettify()方法"></a>6.1 prettify()方法</h6><p><code>soup.prettify()</code> # 显示换行符</p><p><code>print(soup.prettify())</code> # 格式化输出，标签树形式</p><h6 id="6-2-bs4库的编码"><a href="#6-2-bs4库的编码" class="headerlink" title="6.2 bs4库的编码"></a>6.2 bs4库的编码</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;中文&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'中文'</span></span><br><span class="line">print(soup.prettify())</span><br><span class="line">&lt;p&gt;</span><br><span class="line"> 中文</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="五、信息标记的三种形式"><a href="#五、信息标记的三种形式" class="headerlink" title="五、信息标记的三种形式"></a>五、信息标记的三种形式</h4><ol><li><strong><code>XML</code></strong></li></ol><p><code>&lt;name 属性 Attribute(包含标签 Tag)&gt;...&lt;/name&gt;</code></p><ol start="2"><li><code>**JSON**</code></li></ol><p>有类型的键值对  <code>key:value</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> # 一键多值</span><br><span class="line">"name":["value1","value2",...] </span><br><span class="line"></span><br><span class="line"># 键值对的嵌套使用</span><br><span class="line">"name":&#123;</span><br><span class="line">    "key_1": "value1",</span><br><span class="line">    "key_2": "value2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong><code>YAML</code></strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name :</span></span><br><span class="line">    <span class="attr">newName :</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">oldName :</span> <span class="string">value</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 表达并列关系</span></span><br><span class="line"><span class="attr">name :</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"><span class="comment"># |表达整块数据，#表示注释</span></span><br><span class="line"><span class="attr">key :</span> <span class="string">value</span></span><br><span class="line"><span class="attr">key:</span> <span class="comment">#Comment</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"><span class="attr">key :</span></span><br><span class="line"><span class="attr">subkey:</span> <span class="string">subvalue</span></span><br></pre></td></tr></table></figure><h5 id="1-三种信息标记形式的比较"><a href="#1-三种信息标记形式的比较" class="headerlink" title="1.三种信息标记形式的比较"></a>1.三种信息标记形式的比较</h5><ul><li><code>XML</code>:Internet上的信息交互与传递。</li><li><code>JSON</code>:移动应用云端和节点的信息通信，无注释。</li><li><code>YAML</code>：各类系统的配置文件，有注释易读</li></ul><h5 id="2-信息提取的一般方法"><a href="#2-信息提取的一般方法" class="headerlink" title="2.信息提取的一般方法"></a>2.信息提取的一般方法</h5><ul><li>方法一：完整解析信息的标记形式，再提取关键信息。</li></ul><p><code>XML JSON YAML</code></p><p>需要标记解析器 例如：bs4库的标签树遍历</p><p>优点：信息解析准确</p><p>缺点：提取过程繁琐，速度慢。</p><ul><li>方法二：无视标记形式，直接搜索关键信息。</li></ul><p><strong>搜索</strong></p><p>对信息的文本查找函数即可</p><p>优点:提取过程简单，速度较快。</p><p>缺点：提取结果准确性与信息内容直接相关。</p><ul><li>融合方法</li></ul><p>融合方法：结合形式解析与搜索方法，提取关键信息。</p><p><code>XML JSON YMAL</code> 搜索</p><p>需要标记解析器及文本查找函数</p><p><strong>实例</strong></p><p>提取HTML中的所有URL链接</p><p>思路：</p><ol><li>搜索到所有<a>标签</li><li>解析<a>标签格式，提取href后的链接内容</li></ol><h5 id="3-基于bs4库的HTML内容查找方法"><a href="#3-基于bs4库的HTML内容查找方法" class="headerlink" title="3.基于bs4库的HTML内容查找方法"></a>3.基于bs4库的HTML内容查找方法</h5><p><strong>前期工作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = request.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><p><code>&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs)</code></p><ul><li>返回一个列表类型，存储查找的结果。</li></ul><p><code>name</code>:对标签名称的检索字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'a'</span>) <span class="comment"># 返回a标签的列表，可得其中两个属性</span></span><br><span class="line">&gt; </span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all([<span class="string">'a'</span>,<span class="string">'b'</span>]) <span class="comment"># 同时查询'a','b'标签，以列表形式返回</span></span><br><span class="line">&gt;Out[<span class="number">65</span>]: </span><br><span class="line">[&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;,</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>): <span class="comment"># 查询所有的标签</span></span><br><span class="line">    ...:     print(tag.name) </span><br><span class="line">    ...:                                                                        </span><br><span class="line">&gt; </span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title</span><br><span class="line">body</span><br><span class="line">p</span><br><span class="line">b</span><br><span class="line">p</span><br><span class="line">a</span><br><span class="line">a</span><br></pre></td></tr></table></figure><ul><li><code>attrs</code>:对标签属性值的检索字符串，可标注属性检索。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'p'</span>,<span class="string">'course'</span>)   <span class="comment"># 返回p标签中所有的course属性</span></span><br><span class="line">Out[<span class="number">68</span>]: </span><br><span class="line">[&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all(id=<span class="string">'link1'</span>)  <span class="comment"># 返回id='link1'的全部标签信息</span></span><br><span class="line">Out[71]: [&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all(id=<span class="string">'link'</span>)  </span><br><span class="line">Out[<span class="number">75</span>]: []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询带有link(查询出所有的link，无论尾号为几），需要借助正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">soup.find_all(id=re.compile(<span class="string">'link'</span>))  </span><br><span class="line">Out[<span class="number">79</span>]: </span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br></pre></td></tr></table></figure><ul><li><p><code>recursive</code>:是否对子孙全部检索，默认True。</p></li><li><p><code>string</code>:&lt;&gt;…&lt;/&gt;中字符串区域的检索字符串。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只返回检索部分</span></span><br><span class="line">soup.find_all(string=<span class="string">'Basic Python'</span>)    </span><br><span class="line">Out[<span class="number">80</span>]: [<span class="string">'Basic Python'</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 利用正则表达式，提取全部</span></span><br><span class="line">soup.find_all(string=re.compile(<span class="string">'python'</span>)) <span class="comment"># 提取全部带Python的过程</span></span><br><span class="line">Out[<span class="number">82</span>]: </span><br><span class="line">[<span class="string">'This is a python demo page'</span>,</span><br><span class="line"> <span class="string">'The demo python introduces several python courses.'</span>]</span><br></pre></td></tr></table></figure><p><code>&lt;tag&gt;(...)等价于 &lt;tag&gt;.find_all()</code></p><p><code>soup(...)等价于soup.find_all(...)</code></p><h5 id="4-扩展方法"><a href="#4-扩展方法" class="headerlink" title="4.扩展方法"></a>4.扩展方法</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果，字符串类型，同.find()参数</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果，字符串类型，同.find()</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前续平行节点中搜索，返回列表类型，同.find_all()</td></tr><tr><td>&lt;&gt;.find_previous_sibling</td><td>在前续平行节点中返回一个结果，字符串类型，同.find()</td></tr></tbody></table><h4 id="六、正则表达式"><a href="#六、正则表达式" class="headerlink" title="六、正则表达式"></a>六、正则表达式</h4><h5 id="1-正则表达式语法"><a href="#1-正则表达式语法" class="headerlink" title="1.正则表达式语法"></a>1.正则表达式语法</h5><h6 id="1-1正则表达式由字符和操作符构成"><a href="#1-1正则表达式由字符和操作符构成" class="headerlink" title="1.1正则表达式由字符和操作符构成"></a>1.1正则表达式由字符和操作符构成</h6><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何<strong>单个</strong>字符</td><td></td></tr><tr><td>[]</td><td>字符集，对<strong>单个</strong>字符给出取值范围</td><td>[abc]表示a,b,c；[a-z]表示a到z单个字符</td></tr><tr><td>[^]</td><td>非字符集，对个<strong>单个</strong>字符给出排除范围</td><td>[^abc]表示非a或b或c的单个字符</td></tr><tr><td>*</td><td>前一个字符<strong>0次</strong>或无限次扩展</td><td>abc*表示ab、abc、abcc、abcc等</td></tr><tr><td>+</td><td>前一个字符<strong>1次</strong>或无限次扩展</td><td>abc+表示abc、abcc、abccc等</td></tr><tr><td>？</td><td>前一个字符<strong>0次</strong>或<strong>1次</strong>扩展</td><td>abc?表示ab、abc</td></tr><tr><td>|</td><td>左右表达式任意<strong>一个</strong></td><td>abc|def表示adc、def</td></tr><tr><td>{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td>{m,n}</td><td>扩展前一个字符m至n次（含n）</td><td>ab{1,2}c表示abc、abbc</td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc表示abc且在一个字符串的开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>abc$表示abc且在一个字符串的结尾</td></tr><tr><td>()</td><td>分组标记，内部只能使用|操作符</td><td>(abc)表示abc,(abc|def)表示abc、def</td></tr><tr><td>\d</td><td>数字，等价于[0-9]</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[A-Za-z0-9_]</td><td></td></tr></tbody></table><p><strong>举例</strong></p><table><thead><tr><th>正则表达式</th><th>对应字符串</th></tr></thead><tbody><tr><td>P(Y|YT|YTH|YTHO)?N</td><td>‘PN’,’PYN’,’PYTN’,’PYTHN’,’PYTHON’</td></tr><tr><td>PYTHON+</td><td>‘PYTHON’,’PYTHONN’,’PYTHONNN’…</td></tr><tr><td>PY[TH]ON</td><td>‘PYTON’,’PYHON’</td></tr><tr><td>PY[^TH]?ON</td><td>‘PYON’,’PYAON’,’PYBON’,…</td></tr><tr><td>PY{:3}N</td><td>‘PN’,’PYYN’,’PYYYN’</td></tr></tbody></table><h6 id="1-2经典正则表达式实例"><a href="#1-2经典正则表达式实例" class="headerlink" title="1.2经典正则表达式实例"></a>1.2经典正则表达式实例</h6><p><code>^[A-Za-z]+$         由26个字母组成的字符串</code></p><p><code>^[A-Za-z0-9]+$     由26个字母和数字组成的字符串</code></p><p><code>^-?\d+$             整数形式的字符串 - 表示负号</code></p><p><code>^[0-9]*[1-9][0-9]*$  正整数形式的字符串</code></p><p><code>[1-9]\d{5} 中国境内邮政编码，6位</code></p><p><code>[\u4e00- \u9fa5]   匹配中文字符utf-8编码</code></p><p><code>\d{3}-\d{8}|\d{4}-\d{7}    国内电话号码，010-68913536</code> </p><h6 id="1-3匹配IP地址的正则表达式"><a href="#1-3匹配IP地址的正则表达式" class="headerlink" title="1.3匹配IP地址的正则表达式"></a>1.3匹配IP地址的正则表达式</h6><p>IP地址字符串形式的正则表达式（IP地址分4段，每段0-255）</p><ul><li><p>粗略划分：</p><ul><li><code>\d+.\d+.\d+.\d+</code></li><li><code>\d{1,3}.\d{1,3}.\d{1,3}.\{1,3}</code></li></ul></li><li><p>精确划分</p><ul><li><code>0-99</code>: [1-9]?\d</li><li><code>100-199</code>:1\d{2}</li><li><code>200-249</code>:2[0-4]\d</li><li><code>250-255</code>:25[0-5]</li></ul><p><code>拼接</code>：<code>(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])</code></p></li></ul><h5 id="2-Re库"><a href="#2-Re库" class="headerlink" title="2.Re库"></a>2.Re库</h5><h6 id="2-1-raw-string类型（原生字符串类型）"><a href="#2-1-raw-string类型（原生字符串类型）" class="headerlink" title="2.1 raw string类型（原生字符串类型）"></a>2.1 raw string类型（原生字符串类型）</h6><p>re库采用raw string类型表示正则表达式，表示为：<code>r&#39;text&#39;</code></p><p><strong>即：字符串原样输出，不用采用转移字符\。</strong></p><h6 id="2-2-Re库主要功能函数"><a href="#2-2-Re库主要功能函数" class="headerlink" title="2.2 Re库主要功能函数"></a>2.2 Re库主要功能函数</h6><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>re.search()</td><td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td>re.match()</td><td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td>re.findall()</td><td>搜索字符串，以<strong>列表类型</strong>返回全部能匹配的子串</td></tr><tr><td>re.split()</td><td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td>re.finditer()</td><td>搜索字符串，返回一个匹配结果的迭代类型，每个<strong>迭代</strong>元素是match对象</td></tr><tr><td>re.sub()</td><td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><ul><li><p><code>re.search(pattern,string,flags=0)</code></p><ul><li><p>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。</p></li><li><p><code>pattern</code>:正则表达式的字符串或原生字符串表示</p></li><li><p><code>string</code>:待匹配字符串。</p></li><li><p><code>flags</code>:正则表达式使用时的控制标记。</p><ul><li><p><code>flags</code>:正则表达式使用时的控制标记</p><table><thead><tr><th>常用标记</th><th>说明</th></tr></thead><tbody><tr><td>re.I    re.IGNORECASE</td><td>忽略正则表达式的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td>re.M    <br />re.MULTILINE</td><td>正则表达式中的^操作符能够将给定字符串的每行当做匹配开始</td></tr><tr><td>re.S  <br />re.DOTALL</td><td>正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))</span><br><span class="line">&gt; <span class="number">100081</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>re.match(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></li><li><p><code>re.findall(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>)    </span><br><span class="line">ls</span><br><span class="line">&gt;  [<span class="string">'100081'</span>, <span class="string">'100084'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,string,maxsplit,flags=0)</code></p><ul><li><code>maxsplit</code>:最大分割数目，达到数目，剩余部分作为最后一个元素输出。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>) <span class="comment"># 将匹配的切割掉</span></span><br><span class="line">&gt; [<span class="string">'AAA'</span>, <span class="string">' BBBB'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>): <span class="comment"># 迭代输出</span></span><br><span class="line">    <span class="keyword">if</span> m:</span><br><span class="line">        print(m.group(<span class="number">0</span>))</span><br><span class="line">&gt; </span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span></span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,repl,string,count=0,flags=0)</code></p><ul><li><code>repl</code>:替换匹配字符串的字符串</li><li><code>count</code>:匹配的最大替换次数</li></ul></li></ul><h6 id="2-3-Re库的另一种等价用法"><a href="#2-3-Re库的另一种等价用法" class="headerlink" title="2.3 Re库的另一种等价用法"></a>2.3 Re库的另一种等价用法</h6><p><code>rst = re.search(r&#39;[1-9]\d{5}&#39;,&#39;BIT 100081&#39;) 函数式用法：一次性操作</code></p><p><strong>等价于：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向对象用法：编译后的多次操作</span></span><br><span class="line">pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>) </span><br><span class="line">rst = pat.search(<span class="string">'BIT 100081'</span>)</span><br></pre></td></tr></table></figure><p><code>regex = re.compile(pattern,flags=0)</code></p><ul><li>将正则表达式的字符串形式编译成<strong>正则表达式对象</strong><ul><li><code>pattern</code>:正则表达式的字符串或原生字符串表示</li><li><code>flags</code>:正则表达式使用时的控制标记</li></ul></li></ul><h6 id="2-4-Match对象的属性"><a href="#2-4-Match对象的属性" class="headerlink" title="2.4 Match对象的属性"></a>2.4 Match对象的属性</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.string</td><td>待匹配的文本</td></tr><tr><td>.re</td><td>匹配时使用的pattern对象（正则表达式）</td></tr><tr><td>.pos</td><td>正则表达式搜索文本的开始位置</td></tr><tr><td>.endpos</td><td>正则表达式搜索文本的结束位置</td></tr></tbody></table><h6 id="2-5-Match对象的方法"><a href="#2-5-Match对象的方法" class="headerlink" title="2.5 Match对象的方法"></a>2.5 Match对象的方法</h6><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.group(0)</td><td>获取匹配后的字符串</td></tr><tr><td>.start()</td><td>匹配字符串在原始字符串的开始位置</td></tr><tr><td>.end()</td><td>匹配字符串在原始字符串的结束位置</td></tr><tr><td>.span()</td><td>返回(.start(),.end())</td></tr></tbody></table><h6 id="2-6-Re库的贪婪匹配和最小匹配"><a href="#2-6-Re库的贪婪匹配和最小匹配" class="headerlink" title="2.6 Re库的贪婪匹配和最小匹配"></a>2.6 Re库的贪婪匹配和最小匹配</h6><p><strong>实例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'PY.*N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">101</span>]: <span class="string">'PYANBNCNDN'</span></span><br></pre></td></tr></table></figure><p><strong>Re库默认采用贪婪匹配，即输出匹配最长的子串。</strong></p><p><strong>最小匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">102</span>]: <span class="string">'PYAN'</span></span><br></pre></td></tr></table></figure><p><strong>最小匹配操作符</strong></p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td>+?</td><td>前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td>??</td><td>前一个字符0次或1次扩展，最小匹配</td></tr><tr><td>{m,n}?</td><td>扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Request </tag>
            
            <tag> Beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础使用</title>
      <link href="/2020/03/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><code>JDBC:Java DataBase Connectivity</code>,即为Java数据库连接。</p><p><code>JDBC</code>是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。即：定义的一套操作所有关系型数据库的规则，是为接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p><fancybox><img src='https://s1.ax1x.com/2020/03/18/8da5k9.png'></fancybox><a id="more"></a><h2 id="JDBC简单使用"><a href="#JDBC简单使用" class="headerlink" title="JDBC简单使用"></a>JDBC简单使用</h2><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<br> 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br> 2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo01</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一条数据库数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入驱动jar包（类似于Python中的第三方库</span></span><br><span class="line">        <span class="comment">//2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//3.获取数据库连接对象 jdbc:mysql://localhost:3306/databases 本机</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://url:port/Database"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql的对象Statement</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，在数据库连接、SQL语句的执行等等过程中，可能会发生异常，报错等。但是，数据库的资源要释放，故采用异常处理的方式，关闭数据库连接。</p><p><strong>处理异常的方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.采用异常的方式通过JDBC连接数据库</span></span><br><span class="line"><span class="comment"> * 2.插入一条语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为了使Connection方法可以接受到值，故将参数提升到成员变量的位置上</span></span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 异常捕获的方式处理异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"insert into account values(null,'Lisa',2000)"</span>;</span><br><span class="line">            <span class="comment">//3.获取连接对象 </span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://url:port/db3"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">            <span class="comment">//4.获取执行sql对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"修改成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"修改失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><ol><li><p><code>DriverManager：驱动管理对象</code></p><p>用于注册驱动，jar包导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：</strong>文件的读取，只需要读取一次，即可拿到这些值。故使用静态代码块完成。</p></li><li><p><code>static Connection getConnection(String url, String user, String password)</code></p><p><code>Connection</code>：数据库连接对象</p><p>功能：</p><pre><code>1. 获取执行sql的对象    * `Statement createStatement()`    * `PreparedStatement prepareStatement(String sql)`  2. 事务管理：* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务* 提交事务：commit() * 回滚事务：rollback() 3. `Statement`：执行sql的对象**注意**：`createStatement`方法会造成SQL注入的问题，后期采用`PreparedStatement`来执行SQL对象，并采用预编译的方式，采用参数`?`作为占位符,且效率更高。4. `ResultSet`：结果集对象,封装查询结果(next,类似指针移动取值方法)* boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true.* getXxx(参数):获取数据.    - 其中Int代表列的编号，参数**从1开始**。    - String代表列的名称（参数）。</code></pre></li></ol><h4 id="JDBC操作数据库的一般SQL语法"><a href="#JDBC操作数据库的一般SQL语法" class="headerlink" title="JDBC操作数据库的一般SQL语法"></a>JDBC操作数据库的一般SQL语法</h4><ol><li>更新操作</li></ol><p><code>String sql = &quot;update account set balance = 500 where id = 1&quot;;</code></p><ol start="2"><li>插入操作</li></ol><p><code>String sql = &quot;insert into account values(null,&#39;Lisa&#39;,2000)&quot;;</code></p><ol start="3"><li>删除操作</li></ol><p><code>String sql = &quot;delete from account where id = 3&quot;;</code></p><ol start="4"><li>创建操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"create table student (id int primary key not null,name varchar(20))"</span>;</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);<span class="comment">//处理结果，创建表返回的为0</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><ol start="5"><li>查询操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">resultSet = stmt.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123; <span class="comment">//resultSet指针下移一行，并判断当前行内容是否为空，内容不为空，进入循环体</span></span><br><span class="line">    <span class="keyword">int</span> id = resultSet.getInt(<span class="number">1</span>);<span class="comment">// 取第一列的元素</span></span><br><span class="line">    String name = resultSet.getString(<span class="string">"NAME"</span>);</span><br><span class="line">    <span class="keyword">int</span> balance = resultSet.getInt(<span class="number">3</span>);</span><br><span class="line">    System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>[1] <a href="[https://baike.baidu.com/item/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/1173389?fromtitle=JDBC&fromid=485214&fr=aladdin](https://baike.baidu.com/item/Java数据库连接/1173389?fromtitle=JDBC&fromid=485214&fr=aladdin)">Java数据库连接</a></p><p>[2] <a href="http://www.itheima.com/" target="_blank" rel="noopener">Itcast视频资料</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习:决策树入门之泰坦尼克号案例</title>
      <link href="/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本文用于记录机器学习中的一次入门练习，即：利用决策树进行简单的二分类。同时，结合Kaggle上的经典案例Titanic，来测试实际效果。</p><h1 id="一、数据集"><a href="#一、数据集" class="headerlink" title="一、数据集"></a>一、数据集</h1><p>采用<a href="https://www.kaggle.com/c/titanic/data" target="_blank" rel="noopener">Kaggle</a>中的Titanic的数据集。数据包含分为：  </p><ul><li>训练集: training set (train.csv)</li><li>测试集: test set (test.csv)</li><li>提交标准: gender_submission.csv  </li></ul><p>由于Kaggle涉及到科学上网的操作，所以<a href="https://github.com/ChemLez/ML-sklearn/tree/master/1-%20DecisionTree" target="_blank" rel="noopener">原始数据集</a>已经下载好放在Gighub上了。</p><h1 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h1><p>首先导入训练集，查看数据的情况：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier <span class="comment"># 导入模型决策树分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score,train_test_split,GridSearchCV <span class="comment"># 导入的模型作用分别为交叉验证、训练集与数据集的划分，网格搜索</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'/Users/liz/code/jupyter-notebook/sklearn/1- DecisionTree/Titanic_train.csv'</span>) <span class="comment"># 导入数据集</span></span><br><span class="line">data.head() <span class="comment"># 显示数据集的前五行</span></span><br><span class="line">[out]:</span><br></pre></td></tr></table></figure><a id="more"></a><overflow><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SlibSp</th><th>Parch</th><th>Ticek</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A/5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON/O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table></overflow><p>通过以上的数据所展示的情况，我们所要做的是将Survived作为标签，其余的列作为特征。目标：以所知的特征来预测标签。这份数据集的实际意义是:通过已知数据对乘客的生还情况做一次预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data.info() <span class="comment"># 查看整个训练集的情况</span></span><br><span class="line">out:</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">RangeIndex</span>:</span> <span class="number">891</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">12</span> columns):</span><br><span class="line">    PassengerId    <span class="number">891</span> non-null int64</span><br><span class="line">    Survived       <span class="number">891</span> non-null int64</span><br><span class="line">    Pclass         <span class="number">891</span> non-null int64</span><br><span class="line">    Name           <span class="number">891</span> non-null object</span><br><span class="line">    Sex            <span class="number">891</span> non-null object</span><br><span class="line">    Age            <span class="number">714</span> non-null float64</span><br><span class="line">    SibSp          <span class="number">891</span> non-null int64</span><br><span class="line">    Parch          <span class="number">891</span> non-null int64</span><br><span class="line">    Ticket         <span class="number">891</span> non-null object</span><br><span class="line">    Fare           <span class="number">891</span> non-null float64</span><br><span class="line">    Cabin          <span class="number">204</span> non-null object</span><br><span class="line">    Embarked       <span class="number">889</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">2</span>), int64(<span class="number">5</span>), object(<span class="number">5</span>)</span><br><span class="line">    memory usage: <span class="number">83.7</span>+ KB</span><br></pre></td></tr></table></figure><h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><ol><li>通过以上的数据展示，共有891条数据，其中具有缺失值的特征有：Age、Cabin、Embarked；非数值型的特征有：Name,Sex,Ticket,Cabin,Embarked。</li><li>当我们采用现有的特征对乘客进行生还情况预测时，一些处理较为麻烦且不太重要的特征对可不采用。例如：这里的Name、Ticket可以不采用，因为在实际情况中乘客的名字以及所购的票对于乘客的生还情况作用不大。另外一点原因是这两者皆为非数值型数据，处理成数值形式较为复杂（在计算机中所接受的数据最终都要以数字的形式进行呈现）。</li><li>由于Cabin缺失值较多，这里采用删除的方式，理由同上。</li><li>虽然性别也为字符型数据，当在实际中性别对于逃生的可能性具有一定的影响，故对其保留。</li><li>将缺失值进行填补；将非数值型数据转化为数值型数据。    </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Name、Ticket、Cabin特征列</span></span><br><span class="line">data.drop([<span class="string">'Name'</span>,<span class="string">'Cabin'</span>,<span class="string">'Ticket'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺失值的填补</span></span><br><span class="line"><span class="comment"># 对于Age的缺失值填补的一种策略为：以年龄的平均值作为填补</span></span><br><span class="line">data.loc[:,<span class="string">'Age'</span>] = data[<span class="string">'Age'</span>].fillna(int(data[<span class="string">'Age'</span>].mean()))</span><br><span class="line"><span class="comment"># Embarked由于只有两条数据具有缺失值，这里采用的方式是删除这两条缺失的数据（缺失两条数据对模型的训练好坏影响不大）</span></span><br><span class="line">data = data.dropna()</span><br><span class="line">data = data.reset_index(drop = <span class="literal">True</span>) <span class="comment"># 删除过后，用于重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将非数值型数据转化为数值型数据</span></span><br><span class="line"><span class="comment"># 性别只有两类，故可用0\1来表示男女</span></span><br><span class="line">data[<span class="string">'Sex'</span>] = (data[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).astype(int) <span class="comment"># 0表示女，1表示男</span></span><br><span class="line">tags = data[<span class="string">'Embarked'</span>].unique().tolist() <span class="comment"># tags: ['S', 'C', 'Q']</span></span><br><span class="line"><span class="comment"># Embarked只有三类分别以S,C,Q的索引代表他们,0~9均可采用此种方法</span></span><br><span class="line">data.iloc[:,data.columns == <span class="string">'Embarked'</span>] = data[<span class="string">'Embarked'</span>].apply(<span class="keyword">lambda</span> x : tags.index(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">data.info() <span class="comment"># 查看数据信息</span></span><br><span class="line">out:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">889</span> entries, <span class="number">0</span> to <span class="number">888</span></span><br><span class="line">Data columns (total <span class="number">9</span> columns):</span><br><span class="line">PassengerId    <span class="number">889</span> non-null int64</span><br><span class="line">Survived       <span class="number">889</span> non-null int64</span><br><span class="line">Pclass         <span class="number">889</span> non-null int64</span><br><span class="line">Sex            <span class="number">889</span> non-null int64</span><br><span class="line">Age            <span class="number">889</span> non-null float64</span><br><span class="line">SibSp          <span class="number">889</span> non-null int64</span><br><span class="line">Parch          <span class="number">889</span> non-null int64</span><br><span class="line">Fare           <span class="number">889</span> non-null float64</span><br><span class="line">Embarked       <span class="number">889</span> non-null int64</span><br><span class="line">dtypes: float64(<span class="number">2</span>), int64(<span class="number">7</span>)</span><br><span class="line">memory usage: <span class="number">62.6</span> KB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特征与标签进行分离</span></span><br><span class="line">x = data.iloc[:,data.columns != <span class="string">'Survived'</span>] <span class="comment"># 取出Survived以为的列作为特征x</span></span><br><span class="line">y = data.iloc[:,data.columns == <span class="string">'Survived'</span>] <span class="comment"># 取出Survived列作为特征y</span></span><br></pre></td></tr></table></figure><h5 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h5><p>思路：采用交叉验证来评估我们的模型；同时采用网格搜索来查找决策树中常见的最佳参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网格搜索：能够帮助我们同时调整多个参数的技术，本质是枚举技术。</span></span><br><span class="line"><span class="comment"># paramerters：用于确定的参数。</span></span><br><span class="line">parameters = &#123;<span class="string">'splitter'</span>:(<span class="string">'best'</span>,<span class="string">'random'</span>)</span><br><span class="line">             ,<span class="string">'criterion'</span>:(<span class="string">'gini'</span>,<span class="string">'entropy'</span>)</span><br><span class="line">             ,<span class="string">'max_depth'</span>:[*range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">             ,<span class="string">'min_samples_leaf'</span>:[*range(<span class="number">1</span>,<span class="number">50</span>,<span class="number">5</span>)]</span><br><span class="line">             ,<span class="string">'min_impurity_decrease'</span>:[*np.linspace(<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">20</span>)]</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网格搜索实例代码，所需要确定的参数越多，耗时越长</span></span><br><span class="line">clf = DecisionTreeClassifier(random_state=<span class="number">30</span>)</span><br><span class="line">GS = GridSearchCV(clf,parameters,cv=<span class="number">10</span>) <span class="comment"># cv=10,做10次交叉验证</span></span><br><span class="line">GS = GS.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最佳参数</span></span><br><span class="line">GS.best_params_</span><br><span class="line">out:</span><br><span class="line">    &#123;<span class="string">'criterion'</span>: <span class="string">'gini'</span>,</span><br><span class="line"> <span class="string">'max_depth'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'min_impurity_decrease'</span>: <span class="number">0.0</span>,</span><br><span class="line"> <span class="string">'min_samples_leaf'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'splitter'</span>: <span class="string">'best'</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最佳得分</span></span><br><span class="line">GS.best_score_</span><br></pre></td></tr></table></figure><p>确定了设置的参数的最佳值，开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型，将以上设置参数的最佳值填入模型的实例化中</span></span><br><span class="line">clf_model = DecisionTreeClassifier(criterion=<span class="string">'gini'</span></span><br><span class="line">                                  ,max_depth=<span class="number">3</span></span><br><span class="line">                                  ,min_samples_leaf=<span class="number">1</span></span><br><span class="line">                                  ,min_impurity_decrease=<span class="number">0</span></span><br><span class="line">                                  ,splitter=<span class="string">'best'</span></span><br><span class="line">                                  )</span><br><span class="line">clf_model = clf_model.fit(x,y)</span><br></pre></td></tr></table></figure><p>导出模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line">joblib.dump(clf_model,<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/clf_model.m'</span>)</span><br></pre></td></tr></table></figure><p>测试集的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入测试集</span></span><br><span class="line">data_test = pd.read_csv(<span class="string">'/Users/liz/code/jupyter-notebook/sklearn/1- DecisionTree/Titanic_test.csv'</span>)</span><br><span class="line">data_test.info()</span><br><span class="line">out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">RangeIndex</span>:</span> <span class="number">418</span> entries, <span class="number">0</span> to <span class="number">417</span></span><br><span class="line">    Data columns (total <span class="number">11</span> columns):</span><br><span class="line">    PassengerId    <span class="number">418</span> non-null int64</span><br><span class="line">    Pclass         <span class="number">418</span> non-null int64</span><br><span class="line">    Name           <span class="number">418</span> non-null object</span><br><span class="line">    Sex            <span class="number">418</span> non-null object</span><br><span class="line">    Age            <span class="number">332</span> non-null float64</span><br><span class="line">    SibSp          <span class="number">418</span> non-null int64</span><br><span class="line">    Parch          <span class="number">418</span> non-null int64</span><br><span class="line">    Ticket         <span class="number">418</span> non-null object</span><br><span class="line">    Fare           <span class="number">417</span> non-null float64</span><br><span class="line">    Cabin          <span class="number">91</span> non-null object</span><br><span class="line">    Embarked       <span class="number">418</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">2</span>), int64(<span class="number">4</span>), object(<span class="number">5</span>)</span><br><span class="line">    memory usage: <span class="number">36.0</span>+ KB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集处理的方法同训练集，同时测试集要与训练集保持同样的特征</span></span><br><span class="line"><span class="comment"># 由于最后，我们需要将处理结果上传到Kaggle上，所以不能够将数据条目减少，即：需要上传418条测试数据；故这里Fare缺失的一条数目同样采用平均值来填补</span></span><br><span class="line">data_test.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>,<span class="string">'Cabin'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>)</span><br><span class="line">data_test[<span class="string">'Age'</span>] = data_test[<span class="string">'Age'</span>].fillna(int(data_test[<span class="string">'Age'</span>].mean()))</span><br><span class="line">data_test[<span class="string">'Fare'</span>] = data_test[<span class="string">'Fare'</span>].fillna(int(data_test[<span class="string">'Fare'</span>].mean()))</span><br><span class="line">data_test.loc[:,<span class="string">'Sex'</span>] = (data_test[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).astype(int)</span><br><span class="line">tags = data_test[<span class="string">'Embarked'</span>].unique().tolist()</span><br><span class="line">data_test[<span class="string">'Embarked'</span>] = data_test[<span class="string">'Embarked'</span>].apply(<span class="keyword">lambda</span> x : tags.index(x))</span><br></pre></td></tr></table></figure><p>此时测试集数据预处理完毕，导出模型并对数据进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出模型且测试数据集</span></span><br><span class="line">model = joblib.load(<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/clf_model.m'</span>)</span><br><span class="line">Survived = model.predict(data_test) <span class="comment"># 测试结果</span></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">Survived = pd.DataFrame(&#123;<span class="string">'Survived'</span>:Survived&#125;) <span class="comment"># 将结果转换为字典形式并后续作为csv形式导出</span></span><br><span class="line">PassengerId = data_test.iloc[:,data_test.columns == <span class="string">'PassengerId'</span>] <span class="comment"># 切片，分割出PassengerId</span></span><br><span class="line">gender_submission = pd.concat([PassengerId,Survived],axis=<span class="number">1</span>)<span class="comment"># 将Survived与PassengerId拼接，一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导出数据</span></span><br><span class="line"><span class="comment">#导出数据</span></span><br><span class="line">gender_submission.index = np.arange(<span class="number">1</span>, len(gender_submission)+<span class="number">1</span>) <span class="comment"># 索引从1开始</span></span><br><span class="line">gender_submission.to_csv(<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/gender_submission.csv'</span>,index=<span class="literal">False</span>) <span class="comment"># index=False，导出时不显示索引</span></span><br></pre></td></tr></table></figure><p>导出文件:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>1</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>413</td>      <td>1305</td>      <td>0</td>    </tr>    <tr>      <td>414</td>      <td>1306</td>      <td>1</td>    </tr>    <tr>      <td>415</td>      <td>1307</td>      <td>0</td>    </tr>    <tr>      <td>416</td>      <td>1308</td>      <td>0</td>    </tr>    <tr>      <td>417</td>      <td>1309</td>      <td>0</td>    </tr>  </tbody></table><p>418 rows × 2 columns</p><p>将结果提交到<a href="https://www.kaggle.com/c/titanic" target="_blank" rel="noopener">Kaggle</a>上，最终得分：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/02/09/1WxMnK.png" alt="得分"></p><p>最终得分0.77990，分数不高，最高有得满分的，此篇只是作为机器学习及Kaggle的一个入门。</p><p>最终的源代码及Kaggle的数据集都会上传到我的Github仓库中，其中也包括一些网络上搬运的相关笔记也都会上传到Github上,此仓库会持续更新…</p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><btns rounded grid5><a href='https://github.com/ChemLez/ML-sklearn/' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DecisionTree </tag>
            
            <tag> Kaggle </tag>
            
            <tag> sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云端MySQL安装及相关配置</title>
      <link href="/2020/01/22/%E4%BA%91%E7%AB%AFMySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/22/%E4%BA%91%E7%AB%AFMySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>由于自己的阿里云账号申请不足6个月，能够享受新用户云服务器ECS89元一年的优惠政策，所以就购买了一台云服务器，作为日常学习的使用。本文用来记录此次装载云服务器所遇到的一些问题及MySQL的安装过程。</p><h4 id="一、云服务器的选配及配置"><a href="#一、云服务器的选配及配置" class="headerlink" title="一、云服务器的选配及配置"></a>一、云服务器的选配及配置</h4><p>此次我选购的服务器网址:<a href="http://aliyun.langsan.com/?bd_vid=8575091722087683835" target="_blank" rel="noopener">http://aliyun.langsan.com/?bd_vid=8575091722087683835</a>。下图为此次所购的云服务器配置:  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AMtQs.png" alt="服务器配置"> </p><a id="more"></a><p>后续步骤为：提货券的兑换；地域站点的选取以及系统的选配。这里我选取的为上海的站点（大陆境内站点随便选没什么差别），系统选装的为Centos7(具体到7.x没什么区别)。然后就是阿里云那边的自动配置了。购买及配置较为简单，全部为阿里云的傻瓜一站式操作。</p><h4 id="二、安全组的设置"><a href="#二、安全组的设置" class="headerlink" title="二、安全组的设置"></a>二、安全组的设置</h4><p>第一次服务器的使用，需要进行安全组的设置。进入到自己的控制台-实例与镜像-实例。这个时候就能够看到自己的服务器。勾选此台服务器：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AlfPO.png" alt="">  </p><ul><li><p>依次设置实例ID、重置实例密码；  </p></li><li><p>在更多选项中选择密码/密匙。重置远程连接的密码。  </p><p><strong>注</strong>:实例密码为操作系统的密码，即为root用户名密码。在实例创建时可选设定，如果没有设定或者遗忘可在阿里云的个人控制台上进行密码重置操作；远程链接密码是通过个人后台控制面板，通过内网形式直接链接到操作系统上，这种链接方式可以绕过安全组拦截，一般用于安全组将远程端口拦截时选择此种方法。  </p></li><li><p>网络与安全组。将此实例加入到安全组里。  </p></li><li><p>设置安全组规则  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1A3K1g.png" alt="">  在安全组规则中，采用快速创建规则。规则方向：入方向/出方向，均可采用，用于控制服务器访入与访出。授权策略：允许/禁止（不解释）。常用端口（TCP）:控制端口的访入与访出（根据自己的习惯与用处）。授权对象:默认为0.0.0.0/0。至此服务器基本配置到此结束。<br>回到控制台实例中，点击远程连接。区域即为所选区域（一般默认不变）；端口默认为22；用户名默认为root；密码是之前设置的实例密码。</p></li></ul><h4 id="三、本机ssh连接服务器免密设置"><a href="#三、本机ssh连接服务器免密设置" class="headerlink" title="三、本机ssh连接服务器免密设置"></a>三、本机ssh连接服务器免密设置</h4><p>上一部分中，我们在阿里云的网页实例中，远程连接到我们的服务器。但是，每当我们需要用到服务器时，便要通过阿里云账号登录再来连接就显得比较麻烦。这里，通过ssh的命令在自己电脑终端来远程连接自己的服务器。<br>终端命令：<code>ssh root@ip</code>  </p><ul><li>root:远程连接的用户名；一般默认不变即为root。  </li><li>ip:自己服务器公网ip。<br>回车后，输入自己的root用户实例密码即可连接。<br><strong>注：Linux、Mac系统终端自带ssh命令；Windows系统不自带ssh命令，需要借助putty或Xshell客户端软件使用。</strong><br>但是，每次我们在自己的电脑连接到服务器都需要通过ip地址，再由密码登录也比较麻烦。所以这里再介绍本机免密码登录服务器的方式。<br>思路：将自己的公有密匙添加到服务器端。  </li></ul><h5 id="1-在本地生成一对公匙-密匙"><a href="#1-在本地生成一对公匙-密匙" class="headerlink" title="1.在本地生成一对公匙-密匙"></a>1.在本地生成一对公匙-密匙</h5><p><code>ssh-keygen -t rsa</code><br>采用默认目录，不设置密码，一路回车即可。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AYUaR.png" alt="">  最终会在~/.ssh目录下生成id_rsa(密匙)；id_rsa.pub(公匙)。  </p><h5 id="2-将公匙部署至服务器上"><a href="#2-将公匙部署至服务器上" class="headerlink" title="2.将公匙部署至服务器上"></a>2.将公匙部署至服务器上</h5><p>在本地命令执行：<br>方式一:<code>scp ~/.ssh/id_rsa.pub root@公网IP地址:～/.ssh/authorized_keys</code><br>方式二：<code>ssh-copy-id ~/.ssh/id_rsa.pub root@公网IP地址</code><br>以上两种方式即将本地公匙内容复制到远程服务器<code>～/.ssh/authorized_keys</code>的文件中。</p><p>至此，再次登录服务器只需一句ssh终端命令即可，不需要再输入密码。<br>到这里还不是最简洁的一种登录方式，因为我们还需要输入root用户账号，ip地址。所以后续还有更简洁的方式：<br>本地需要保存ssh登录主机的相关信息，在本地主机用户根目录下的.ssh文件内创建config文件，用于保存ssh登陆主机的相关信息<br><code>vim config</code>（如果没有vim可以手动到此目下创建config文件）<br>编辑内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host name #AAAAA为服务器主机名</span><br><span class="line">HostName 39.97.170.231 #写服务器ip地址</span><br><span class="line">User root #root为登陆用户名</span><br><span class="line">Port 22 #主机端口，默认是22</span><br><span class="line">IdentityFile &#x2F;Users&#x2F;.ssh&#x2F;id_rsa #自己生成的私钥的文件路径</span><br></pre></td></tr></table></figure><p><strong>注意：Host name是之前服务器设置中设置的实例id/名称</strong><br>实例如下：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AUC5R.png" alt="">  </p><h5 id="3-在服务器设置自动检验的信息"><a href="#3-在服务器设置自动检验的信息" class="headerlink" title="3.在服务器设置自动检验的信息"></a>3.在服务器设置自动检验的信息</h5><p>打开/etc/ssh/sshd_config文件<br><code>vim /etc/ssh/sshd_config</code>找到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes </span><br><span class="line">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>取消注释。<br>至此，以后在自己本机上只需要采用:<code>ssh liz_es</code>即可登录。</p><h4 id="四、-MySQL服务器的安装及相关配置"><a href="#四、-MySQL服务器的安装及相关配置" class="headerlink" title="四、 MySQL服务器的安装及相关配置"></a>四、 MySQL服务器的安装及相关配置</h4><h5 id="MySQ安装"><a href="#MySQ安装" class="headerlink" title="MySQ安装"></a>MySQ安装</h5><p>这一部分记录云服务器端安装MySQL及相关配置</p><ol><li>下载并安装MySQL官方的Yum Repository<br><code>[root@localhost ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code><br>使用上面的命令直接安装Yum Repository<br><code>[root@localhost ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm</code> </li><li>安装MySQL服务器<br><code>root@localhost ~]# yum -y install mysql-community-server</code><br><code>[root@localhost ~]# yum -y remove mysql57-community-release-el7-10.noarch</code>    </li><li>MySQL数据库设置<br>MySQL的启动<br><code>[root@localhost ~]# systemctl start mysqld.service</code><br>MySQL的关闭<br><code>systemctl stop mysqld.service</code><br>查看MySQL运行状态<br><code>[root@localhost ~]# systemctl status mysqld.service</code><br>查找root初始密码<br><code>[root@localhost ~]# grep &quot;password&quot; /var/log/mysqld.log</code><br>登录MySQL<br><code>mysql -uroot -p</code><br>此时需要修改初始密码才能对数据库进行后续操作。又由于数据库默认的密码强度所设置的密码较为复杂，所以需要事先修改密码强度规则。否则在修改密码的过程容易出现以下错误：<br><code>ERROR 1819 (HY000): Your password does not satisfy the current policy requiremen</code><br>下面列出常用的关于密码设置方面的MySQL操作命令。<br>查看MySQL密码相关的全局参数：<br><code>mysql&gt; select @@validate_password_policy;</code><br><code>mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code>  </li></ol><h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h5><p><code>validate_password_dictionary_file</code><br>插件用于验证密码强度的字典文件路径。<br><code>validate_password_length</code> </p><p>密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)<br><code>validate_password_mixed_case_count</code><br>密码至少要包含的小写字母个数和大写字母个数。</p><p><code>validate_password_number_count</code><br>密码至少要包含的数字个数。<br><code>validate_password_policy</code><br>密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。<br><code>validate_password_special_char_count</code> </p><p>密码至少要包含的特殊字符数。</p><h5 id="修改mysql参数配置"><a href="#修改mysql参数配置" class="headerlink" title="修改mysql参数配置"></a>修改mysql参数配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.05 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_mixed_case_count&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_number_count&#x3D;5;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_special_char_count&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;2;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;  </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure><p>可能最后两句在执行时，会报错。这是因为还没对初始密码进行修改。在修改完密码以后<code>FLUSH PRIVILEGES</code>，保证密码强度规则的更新。</p><h5 id="MySQL密码的修改"><a href="#MySQL密码的修改" class="headerlink" title="MySQL密码的修改"></a>MySQL密码的修改</h5><p><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;</code>  </p><h5 id="MySQL用户的创建及权限设置"><a href="#MySQL用户的创建及权限设置" class="headerlink" title="MySQL用户的创建及权限设置"></a>MySQL用户的创建及权限设置</h5><p>在MySQL中其实有一个内置且名为mysql的数据库，这个数据库中存储的是MySQL的一些数据，比如用户、权限信息、存储过程等。通过以下命令可查看当前数据库存在哪些用户；<br><code>SELECT User, Host FROM mysql.user;</code><br>可看见如下类似信息：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------+</span><br><span class="line">| User          | Host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| re_mysql      | %         |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><blockquote><p>Host代表用户所能连接的数据库主机</p><p>% 代表任何主机<br>localhost 代表只能在本机上使用的用户</p></blockquote><ol><li><p>创建用户<br><code>mysql&gt;CREATE USER  &#39;user_name&#39;@&#39;host&#39;  IDENTIFIED BY  &#39;password&#39;;</code><br>user_name:需要创建的用户名称。<br>host:表示要这个新创建的用户允许从哪台机登陆，如果只允许从本机登陆，则填‘localhost’ ；如果指定某台主机登录，则填’ip’;如果允许从任意远程登陆，则填 ‘%’；<br>password:新创建用户的数据库登录密码，需符合密码强度规则。  </p></li><li><p>授权用户<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;user_name&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code><br><code>PRIVILEGES:</code>表示要授予什么权限。例如可以有 select ,insert ,delete,update等,如果要授予全部权力,则填ALL。  </p><p><code>*.*:</code>表示用户的权限能用在哪个库的哪个表中，如果想要用户的权限很作用于所有的数据库所有的表，则填*.*，*是一个通配符，表示全部。<br><code>user_name:</code>所要授权的用户。<br><code>&#39;%&#39;:</code>表面所有远程都可在此用户登录MySQL服务器，具体使用同节。<br><code>WITH GRANT OPTION:</code>用以上命令授权的用户不能给其他用户授权，如果想这个用户能够给其他用户授权，就要在后面加上WITH GRANT OPTION。  </p></li><li><p>删除用户<br><code>DROP  USER ‘user_name’@‘localhost/ip/*’</code>  </p></li><li><p>立即生效<br><code>flush privileges</code>  </p></li><li><p>修改mysql库里边的user表，限制root用户只能从哪个ip登录<br><code>update mysql.user set host=&#39;localhost&#39; where user=&#39;root&#39;;</code></p></li></ol><h4 id="MySQL的远程连接"><a href="#MySQL的远程连接" class="headerlink" title="MySQL的远程连接"></a>MySQL的远程连接</h4><p>云服务器端部署好了MySQL。那么可以在本机中连接云服务器端的MySQL数据库。这里，我借助的是<code>Navicat for MySQL</code>。<br>创建连接：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AYZrQ.png" alt="">  连接名：随便写。<br>主机：云服务器的公有IP。<br>端口：默认端口3306。<br>用户名:即在上一节中创建的新用户，并且是能够远程连接的用户。<br>编辑密码：MySQL这一用户的密码。<br>点击测试连接。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1ATjbD.png" alt="">  成功！<br>以后便可以在本机连接到服务器端的MySQL进行使用。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>当在虚拟机(Ubuntu16.04)中的MySQL采取同样的操作时，可能连接失败。在百度了一番博文以后，所采用的办法是在虚拟机的终端：  </p><ul><li>cd /etc/mysql 进入到my.cnf文件所在的目录下，sudo cp my.cnf my.cnf.bak，备份文件  </li><li>打开配置，找到bind-address= 127.0.0.1这一行，注释掉。  </li><li>重启数据库，使用Navicat进行连接。  </li></ul><h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><ul><li><p>Markdown常用命令：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a>  </p></li><li><p>vim常用命令：<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a>  </p></li><li><p>菜鸟：<a href="https://www.runoob.com/" target="_blank" rel="noopener">https://www.runoob.com/</a>  </p></li><li><p>免费的图床-路过图床：<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a>  </p></li><li><p><a href="https://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗?</a>  </p></li><li><p><a href="https://www.jianshu.com/p/271449df801f" target="_blank" rel="noopener">Hexo 教程：Hexo 博客部署到腾讯云教程</a>  </p></li><li><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a>   </p></li><li><p><strong>git 清除缓存</strong></p><blockquote><p>git rm -r –cached .<br>git add .<br>git commit -m ‘update .gitignore’</p></blockquote></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] centos7下安装mysql（完整配置）:<a href="https://blog.csdn.net/baidu_32872293/article/details/80557668" target="_blank" rel="noopener">https://blog.csdn.net/baidu_32872293/article/details/80557668</a><br>[2] mysql 密码强度规则设置:<a href="https://blog.csdn.net/u014236541/article/details/78244601" target="_blank" rel="noopener">https://blog.csdn.net/u014236541/article/details/78244601</a><br>[3] MYSQL的创建用户，授权用户，删除用户，查看用户:<a href="https://blog.csdn.net/u014453898/article/details/55064312" target="_blank" rel="noopener">https://blog.csdn.net/u014453898/article/details/55064312</a><br>[4] mysql查看所有用户:<a href="https://blog.csdn.net/qq_37996815/article/details/78934536" target="_blank" rel="noopener">https://blog.csdn.net/qq_37996815/article/details/78934536</a><br>[5] Ubuntu 16.04 安装使用MySQL:<a href="https://blog.csdn.net/vXueYing/article/details/52330180" target="_blank" rel="noopener">https://blog.csdn.net/vXueYing/article/details/52330180</a><br>[6] 使用navicat 连接虚拟机上的MySQL数据库:<a href="https://www.jianshu.com/p/8fa82acb16e9" target="_blank" rel="noopener">https://www.jianshu.com/p/8fa82acb16e9</a><br>[7] SSH连接服务器 本地记住用户名及密码:<a href="https://blog.csdn.net/persist_xyz/article/details/90231433" target="_blank" rel="noopener">https://blog.csdn.net/persist_xyz/article/details/90231433</a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Ubuntu的安装与相关设置</title>
      <link href="/2020/01/17/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/01/17/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>近日换了电脑，想装一个Linux系统，但也不想在本机上装双系统，就选择了装起虚拟机。此次选择了安装Ubuntu 16.04.6版本，文章最后会附上常用16.04和18.04ubuntu镜像源下载的网址。本文，用来记录此次虚拟机的装载过程、后续配置。</p><h4 id="一、VMWare-Fusion的下载"><a href="#一、VMWare-Fusion的下载" class="headerlink" title="一、VMWare Fusion的下载"></a>一、VMWare Fusion的下载</h4><p>VMware Fusion是VMware为Macintosh计算机开发的虚拟机管理程序。用来管理虚拟机环境。此次选择了11.5.1的版本-<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0" target="_blank" rel="noopener">下载地址</a>。序列号查询百度即可。</p><h4 id="二、Ubuntu的安装"><a href="#二、Ubuntu的安装" class="headerlink" title="二、Ubuntu的安装"></a>二、Ubuntu的安装</h4><p>打开VMWare Fusion，点击创建新环境。选择创建自定义虚拟机安装。这里没有选择上方的镜像安装，是因为我在第一次用这种方法安装完以后，尝试了各种方法却不能安装VMware tools。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz0DgJ.png" alt="后续步骤1"></p><a id="more"></a> <p>继续下一步<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz00CF.md.png" alt="后续步骤"><br>选择所要安装的操作系系统，这里为Ubuntu 64位。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz0d4U.png" alt="后续步骤3"><br>选择UEFI安装模式。后续的步骤中就一路下一步。安装过程中，如果VMware没有检测到我们所需要安装的镜像源，那么需要我们将镜像源手动添加到配置中。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsri6.png" alt="步骤一"><br>若卡在这里不动，便需要我们手动添加镜像源。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzs2sH.png" alt="步骤二">)<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsgQe.png" alt="步骤三"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsyRO.png" alt="步骤四"><br>后续就是VMware的全自动配置安装了。<br><font color=red><strong>注意：后续语言环境的安装，请选择默认的English,不要改成简体中文模式。</strong></font>因为，当我们熟练了Linux的终端命令以后，我们就不再进行图形化界面的操作，而是转变为字符界面的操作。如果，开始默认的是中文简体，那么在字符界面中，中文会出现菱形乱码，无法识别。从这里的后续安装可以参考<a href="https://jingyan.baidu.com/article/574c52195de75a6c8d9dc1b8.html" target="_blank" rel="noopener">百度百科</a>。<br>在VMware的一系列自动安装配置以后。若出现了:<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzc2yF.png" alt="问题1"><br>将上述添加的磁盘勾选取消<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsgQe.png" alt=""><br>点击虚拟机重启即可！登录，进入图形化界面！<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz2vGt.png" alt="界面"></p><h4 id="三、Ubuntu的镜像源设置"><a href="#三、Ubuntu的镜像源设置" class="headerlink" title="三、Ubuntu的镜像源设置"></a>三、Ubuntu的镜像源设置</h4><p>这里介绍两种方式。<br>第一种方式：点击右上方的设置按钮，进入System settings…在系统栏中选择Software&amp;Updates,将Downloads中的镜像源Others选成Chinese，然后点击右方的选取Select Best Server，等待系统测试选取最佳的节点，再依据后续步骤更新即可。<br>第二种方式：参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华大学开源软件镜像源</a>。按要求和版本号将配置文件改成清华大学的镜像源即可。</p><h4 id="四、VMWare-Tools的安装"><a href="#四、VMWare-Tools的安装" class="headerlink" title="四、VMWare Tools的安装"></a>四、VMWare Tools的安装</h4><p>此时，Ubuntu已经安装好了。但是，如果要想做到本机和虚拟机能够文件共享，那么还需要下载VMWare Tools。点击：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzWjjf.md.png" alt=""><br>由于我的已经安装过了，所以这里显示为重新安装，后续按照下载。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz5rx1.png" alt=""><br>点击安装。</p><ol><li>将安装好的压缩包，VMWaretools-XXX(版本号).tar.gz。移动到桌面。</li><li>打开Ubuntu下的终端命令窗口。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop # 进入桌面</span><br><span class="line">ls  # 查看此压缩包是否在桌面下</span><br><span class="line">tar -xzvf VMWaretools-XXX(版本号).tar.gz # 解压文件</span><br><span class="line">cd VMware-tools-distrib</span><br><span class="line">.&#x2F;vmware-install.pl # 执行vmware-install.pl 进行安装</span><br></pre></td></tr></table></figure><p>依次执行以上命令后，按照提示在终端中输入yes和回车即可。</p><h4 id="五、共享文件夹的设置"><a href="#五、共享文件夹的设置" class="headerlink" title="五、共享文件夹的设置"></a>五、共享文件夹的设置</h4><p>上述步骤中中，安装了VMWare tools，后续就需要设置我们可以共享的文件夹。进入Ubuntu的硬件设置中：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzHHUK.png" alt=""><br>进入共享文件夹。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzH7E6.png" alt=""><br>添加系统文件夹，重启虚拟机。VMWare tools可以使本机和虚拟机之间共享文件；同时可以自动调节虚拟机的分辨率，使得全屏放映使用。</p><h4 id="六、图形界面和字符界面的转换"><a href="#六、图形界面和字符界面的转换" class="headerlink" title="六、图形界面和字符界面的转换"></a>六、图形界面和字符界面的转换</h4><p>首先打开虚拟机中的终端，<code>sudo su</code>进入root模式。</p><ol><li><p>修改grub文件</p><ul><li><p><code>sudo vi /etc/default/grub</code>  </p><ul><li>修改grub文件的三处：  </li></ul><ol><li>将GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”进行注释，即最前方加#。  </li><li>GRUB_CMDLINE_LINUX=”text”,添加为text，文本。  </li><li>GRUB_TERMINAL=console，取消注释。  </li></ol></li></ul></li></ol><p>最终的修改结果如下图：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzj7VA.png" alt=""><br>保存退出。  </p><ol start="2"><li><code>sudo update-grub</code>更新grub文件。  </li><li>执行<code>sudo systemctl set-default multi-user.target</code> 即将开机默认方式改为字符形界面。  </li><li>重新启动虚拟机。<strong>注意:不要使用reboot</strong><br><strong>总结</strong>:以后两种模式的转化只需要两句终端命令即可。</li></ol><ul><li>图形转字符界面：<code>sudo systemctl set-default multi-user.target</code></li><li>字符转图形界面：<code>sudo systemctl set-default graphical.target</code></li><li>最后重启虚拟机，即可！  </li></ul><h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><ul><li>Ubuntu安装的镜像网站：  <ul><li>14.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/14.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/14.04/</a></li><li>16.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/16.04/</a></li><li>18.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/18.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/18.04/</a>  </li></ul></li><li>清华大学镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></li><li>VMWare FUsion安装地址：<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0" target="_blank" rel="noopener">https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0</a></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] <a href="https://blog.csdn.net/u010830004/article/details/79869457" target="_blank" rel="noopener">mac上用VMWare虚拟机装Ubuntu–及Ubuntu安装Vmware Tools</a><br>[2] <a href="https://jingyan.baidu.com/article/574c52195de75a6c8d9dc1b8.html" target="_blank" rel="noopener">如何安装ubuntu系统</a><br>[3] <a href="https://blog.csdn.net/love20165104027/article/details/83377758" target="_blank" rel="noopener">VMware Tools安装</a><br>[4] <a href="https://blog.csdn.net/ibless/article/details/91979711" target="_blank" rel="noopener">Ubuntu16.04 图形界面与字符界面切换</a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列之深拷贝/浅拷贝</title>
      <link href="/2019/10/22/%E5%BA%8F%E5%88%97%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/10/22/%E5%BA%8F%E5%88%97%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>在上周的Python科学计算课上，老师讲到了Python序列的浅拷贝以及深拷贝方面的知识，个人觉得说得比较言简意赅了，对于我这个刚入Python的新手来说，也基本可以避免今后变量的赋值使用错乱的问题。</p><p>这里我们简单的将Python中的标准数据类型分为两类：</p><ul><li>不可变数据类型：int、float、string、boolean</li><li>可变（组合）数据类型：列表（list）、字典（dict）、集合(set)</li></ul><p>先举几个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment"># a为上述定义的不可变数据类型</span></span><br><span class="line">b = a</span><br><span class="line">print(<span class="string">'b=&#123;&#125;'</span>.format(b)) <span class="comment"># b = 1</span></span><br><span class="line">--------</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(<span class="string">'a = &#123;&#125;,b = &#123;&#125;'</span>.format(a,b)) <span class="comment"># a = 1,b = 2</span></span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment"># b为上述定义的组合数据类型 </span></span><br><span class="line">d = c</span><br><span class="line">print(<span class="string">'c = &#123;&#125;,d = &#123;&#125;'</span>.format(c,d)) <span class="comment"># c = [1, 2, 3],d = [1, 2, 3]</span></span><br><span class="line">d.append(<span class="number">4</span>) </span><br><span class="line">print(<span class="string">'c = &#123;&#125;,d = &#123;&#125;'</span>.format(c,d)) <span class="comment"># c = [1, 2, 3, 4],d = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>从上述的例子当中看出，在不可变数据类型中，所定义的变量的值在后来改变（这里是b），并不会引起原来赋给它值的那个量的改变（这里是a）；而在组合数据类型中就发生了改变，我们只是将d的值进行了改变，并没有直接改变c的值，最后c的值却也发生了变化。</p><a id="more"></a><p>这里，基本数据变量的赋值其实就是深拷贝；组合数据类型的赋值就是起了一个别名。</p><p>这里先做出<strong>组合数据类型</strong>中赋值、浅拷贝、深拷贝三种的区别：</p><ul><li><p>直接赋值：其实就是对象的引用（即给对象起一个别名）。</p></li><li><p>浅拷贝（copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝（deepcopy):copy模块的deepcopy方法，完全拷贝了父对象及其子对象。</p><p>关于内部子对象的概念，下方会再解释。</p></li></ul><p>接下来我们再看一组图（上课ppt图片）：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/22/KGgqHg.png" alt="赋值引用"></p><p>这里的a = {1:[1,2,3]}字典类型。b = a : 赋值引用，a 和 b 都指向同一个对象。可以看出，a,b此刻都指向同一个对象，所以改变b的内容，就是在改变a,b同时所指向的对象的内容，可以理解成b就是a的一个别名。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/22/KG2kE4.png" alt="浅拷贝"></p><p>这里 a = {1:[1,2,3]} , b = a.copy()，这里就是一种浅拷贝的方式。可以看出a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）。所以在这里L,M就是对象当中的一个子对象（[1,2,3]）便是这里的子对象。</p><p>举个上述的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = &#123;<span class="number">1</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'北京'</span>:<span class="string">'天安门'</span>&#125;</span><br><span class="line">b = copy.copy(a) <span class="comment"># b = &#123;1：[1,2,3],'北京':'天安门'&#125;</span></span><br><span class="line">b[<span class="number">1</span>].append(<span class="number">4</span>) </span><br><span class="line">b[<span class="string">'上海'</span>] = <span class="string">'东方明珠'</span></span><br><span class="line">b[<span class="string">'北京'</span>] = <span class="string">'鸟巢'</span></span><br><span class="line">print(<span class="string">'输出：a = &#123;&#125;,b = &#123;&#125;'</span>.format(a,b))</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">输出：a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">'北京'</span>: <span class="string">'天安门'</span>&#125;,b = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">'北京'</span>: <span class="string">'鸟巢'</span>, <span class="string">'上海'</span>: <span class="string">'东方明珠'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>b = copy.copy(a)</code> 使得b为单独一个对象，但是它和a的子对象指向统一对象。这里的子对象就是[1,2,3]（列表子对象）。故当改变b中1键对中的值[1,2,3]时，a也会改变（统一子对象)。但向b中添加值时，便不会对a造成影响，因为这是b自身的对象所拥有的值（和a没有关系)。</p><p>那么如何拷贝一个a，但对这个拷贝的对象任意操作时，不会对a产生任何的影响呢？答：采用深拷贝。</p><p>如图:</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/23/KY6iE4.png" alt="深拷贝"></p><p>从图中可以清楚的看出：深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]    <span class="comment">#原始对象  </span></span><br><span class="line">b = a                           <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)                <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)            <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line">a.append(<span class="number">5</span>)                     <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)                <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"></span><br><span class="line">print( <span class="string">'a = '</span>, a )</span><br><span class="line">print( <span class="string">'b = '</span>, b )</span><br><span class="line">print( <span class="string">'c = '</span>, c )</span><br><span class="line">print( <span class="string">'d = '</span>, d )</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>] <span class="comment"># 给a起了一个别名b，本质相同，故b和a的变化相同</span></span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]    <span class="comment"># c中子对象发生了变化 --&gt;浅拷贝</span></span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]         <span class="comment"># a的改变和d无关 --&gt;深拷贝</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于组合数据类型：</p><ul><li><p>直接赋值：其实就是对象的引用（别名）</p></li><li><p>浅拷贝（copy)：拷贝父对象，不会拷贝对象的内部的子对象</p></li><li><p>深拷贝（deepcopy):copy模块的deepcopy方法，完全拷贝了父对象及其子对象。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo yilia 主题添加相册功能</title>
      <link href="/2019/08/28/hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/08/28/hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>当我们使用hexo博客框架中的yilia主题时，在我们这一博客页面中，原作者Litten并未帮我们添加相册这一功能。这时，如果想让我们的博客拥有相册的功能，就需要我们自行添加改变、添加主题中的相关参数。从网上百度了很多，看了许多的博客，还是遇到了一些坑爬不过去。最终，还是请教了一个小伙伴才得以解决。</p><h2 id="一、博客页面添加相册"><a href="#一、博客页面添加相册" class="headerlink" title="一、博客页面添加相册"></a>一、博客页面添加相册</h2><p>首先，打开cmd进入blog的source目录下，创建photos文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd blog</span><br><span class="line">E:\blog&gt;cd source</span><br><span class="line">E:\blog\source&gt;hexo new page &quot;photos&quot;</span><br><span class="line">INFO  Created: E:\blog\source\photos\index.md</span><br></pre></td></tr></table></figure><p>删除文件夹中的index.md文件，否则最终生成的是一个单纯的页面。也可以直接进入source文件下创建photos文件夹。</p><a id="more"></a><h2 id="二、创建图片存储仓库"><a href="#二、创建图片存储仓库" class="headerlink" title="二、创建图片存储仓库"></a>二、创建图片存储仓库</h2><p>因为，我们的博客是部署到远端，使得每一个人都能够看到，而图片在远端的展示，可借助于图床。所以，我们可以专门在github上创建一个仓库用于存储图片。仓库的创建就不再一一赘述，只需登录自己的github，new repository即可。这里，我的仓库名为blog-Picture.<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/28/mHQKyV.png" alt="个人仓库"><br>在创建完远端仓库后，将本地与github上远端仓库关联，这样我们以后才能够将图片推送到远端。<br>远端仓库与本地仓库关联的方法:<br>打开博客文件夹，在此根目录下，使用git ,即 git Bush Here,然后输入</p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:chemlez/picture-blog.git</p></blockquote><p>其中clone的仓库换成自己的仓库地址。这样便能使本地与远端关联起立。此刻，会产生一个blog-Picture的文件夹，在此文件夹下分别创建min_photos、photos文件夹。其中，在此photos文件夹下存入一张图片，再将整个内容推送至远端。</p><blockquote><p>$ git add .<br>$ git commit -m “照片存放”<br>$ git push -u origin master </p></blockquote><p>这个时候本地的内容就被推送到了远端。关于git推送远端的用法，可参照<a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440" target="_blank" rel="noopener">廖雪峰的教程</a>。这样后面我们可以用来查看图片的存入地址，来修改我们的ins.js参数。</p><h2 id="三、创建相册布局样式"><a href="#三、创建相册布局样式" class="headerlink" title="三、创建相册布局样式"></a>三、创建相册布局样式</h2><p>在一开始的博客主题clone中，主题yilia并没有相册的版块。但作者<a href="http://litten.me/" target="_blank" rel="noopener">Litten</a>的博客样式中添加了这一版块。所以，我们可以参照原作者的格式进行相关的修改即可。其中的样式参照这里–<a href="https://github.com/ChemLez/ChemLez.github.io/tree/master/photos" target="_blank" rel="noopener">样式参考</a>。下载完之后：<br>1.删除其中所有的.json文件。因为，后面的.json文件是我们自己博客在上传图片时生成的.<br>2.修改index.ejs。这一步很重要，我自己查百度和相关博文时，都没有提到这一步。将其中的href修改成自己的博客地址。当初我就没有修改，最终，显示出来的永远都是原作者Litten的相册.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div class&#x3D;&quot;instagram itemscope&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;chemlez.github.io&#x2F;&quot; target&#x3D;&quot;_blank&quot; class&#x3D;&quot;open-ins&quot;&gt;图片正在加载中…&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>3.修改ins.js文件里的render()函数，按照上面的注释提醒，进行修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改这里render()函数：修改图片的路径地址.minSrc 小图的路径. src 大图的路径.修改为自己的图片路径(github的路径)</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;photos&#x2F;</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;min_photos&#x2F;</span><br><span class="line">    var render &#x3D; function render(res) &#123;</span><br><span class="line">      var ulTmpl &#x3D; &quot;&quot;;</span><br><span class="line">      for (var j &#x3D; 0, len2 &#x3D; res.list.length; j &lt; len2; j++) &#123;</span><br><span class="line">        var data &#x3D; res.list[j].arr;</span><br><span class="line">        var liTmpl &#x3D; &quot;&quot;;</span><br><span class="line">        for (var i &#x3D; 0, len &#x3D; data.link.length; i &lt; len; i++) &#123;</span><br><span class="line">          var minSrc &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;min_photos&#x2F;&#39; + data.link[i];</span><br><span class="line">          var src &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;photos&#x2F;&#39; + data.link[i];</span><br><span class="line">          var type &#x3D; data.type[i];</span><br><span class="line">          var target &#x3D; src + (type &#x3D;&#x3D;&#x3D; &#39;video&#39; ? &#39;.mp4&#39; : &#39;.jpg&#39;);</span><br><span class="line">          src +&#x3D; &#39;&#39;;</span><br></pre></td></tr></table></figure><p>这里的地址，就可以查看我们第二步所做的工作。打开github，进入blog-Picture仓库后。点击在第二步中上传的照片。<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/29/mqaudA.png" alt="图片">然后点击Download，此时的浏览框中的地址就是我们所需要的地址。</p><h2 id="四、添加脚本"><a href="#四、添加脚本" class="headerlink" title="四、添加脚本"></a>四、添加脚本</h2><p>这里添加的python脚本主要是用于处理图片。脚本下载-<a href="https://github.com/ChemLez/blog-Picture" target="_blank" rel="noopener">下载地址</a>.<br>因为，当我们点击相册这一页面时，展示在眼前的是一张张缩略图。而当你需要预览具体的某一张图时，其显示的是一张大图。所以，我们的预览图照片大小是经过压缩处理的（使得页面加载快）。当我们具体看某张图片时，再使用原画质的图片。所以，min_photos和photos两个文件夹分别对应着这两种图片。其中，min_photos就是处理过后的压缩图片，而photos就是我们存放的图片。所以，这里的python脚本主要就做着这样的工作。</p><ol><li>将其中的.py文件拷贝至本地仓库blog-Picture文件夹中.</li><li>根据脚本文件，图片的命名规则为：2019-10-21_xxx.jpg/png.</li><li>将图片<a href="https://github.com/ChemLez/ChemLez.github.io/blob/master/assets/img/empty.png" target="_blank" rel="noopener">empty.png</a>下载放入博客目录下的assets/img文件夹中.</li><li>打开tool.py文件,修改def handle_photo():<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;E:&#x2F;blog&#x2F;source&#x2F;photos&#x2F;data.json&quot;, &quot;w&quot;) as fp:</span><br></pre></td></tr></table></figure>将其中的的地址，换成你将要生成data.json的位置，就是在第一步中，我们删除的.json文件夹的目录地址。每次，进行tool.py脚本时，都会产生data.json文件，用于存储我们图片的信息。</li></ol><h2 id="五、运行"><a href="#五、运行" class="headerlink" title="五、运行"></a>五、运行</h2><p>1.首先将用于测试的图片名改成上述的命名规则的名字,推送至github远端，进行修改.<br>2.打开终端命令窗口cmd.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">cd blog-Picture &#x2F;&#x2F;用于进入blog-Picture文件夹</span><br><span class="line">python tool.py &#x2F;&#x2F;python脚本文件的运行</span><br><span class="line">第二句的运行这里可能会报错 &#96;no module named PIL&#96;</span><br><span class="line">然后输入：</span><br><span class="line">pip install pillow</span><br><span class="line">可能出现权限不足的情况，按照下方出现的英文，加上权限进行下载。即：一路按照下方的英文,加权限进行下载.</span><br></pre></td></tr></table></figure><p>3.hexo s.预览查看。这里我将video功能隐去了，最初的photos旁边还有一个video功能。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/29/mq6fkF.png" alt=""><br>4.在最初的photos下载中，有个videos.ejs文件，如果想引入一些视频，可将其中的链接即src，视频名进行修改.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h1&gt;指弹_女儿情&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;video-container&quot;&gt;</span><br><span class="line">        &lt;iframe height&#x3D;&quot;80%&quot; width&#x3D;&quot;80%&quot; src&#x3D;&quot;https:&#x2F;&#x2F;player.youku.com&#x2F;embed&#x2F;XMjUzMzY4OTM3Ng&#x3D;&#x3D;&quot; frameborder&#x3D;0 allowfullscreen&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果不想用这一功能，将以下标签注释.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;photos-btn&quot; href&#x3D;&quot;&#x2F;photos&#x2F;videos.html&quot;&gt;Video&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ol><li>每次将需要上传的图片，放入到blog-Picture中的photos文件夹.图片的命名一定要遵循上述说的命名规则.<strong>注意</strong>：如果想让多张图片归类在页面中的某一个年、月份下，必须使得日期一模一样，只能修改xxx。如果命名中，年、月相同，而日期不同便会在相册页面额外生成一个list，其表头相同。</li><li>cmd命令窗口进入blog-Picture,再进行python tool.py，运行脚本.</li><li>将图片推送到github远端仓库，产生链接.</li><li>hexo s 进入本地窗口预览，没有问题后：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清除页面缓存</span><br><span class="line">hexo g &#x2F;&#x2F;用于生成改动的文件</span><br><span class="line">hexo d &#x2F;&#x2F;部署到远端网站</span><br></pre></td></tr></table></figure><btns rounded grid5><a href='https://Chemlez.github.io/photos/' target="_blank" rel="noopener"><i class='fas fa-book'></i>最终效果</a></a></btns></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] hexo Yilia 主题如何添加相册功能:<a href="https://www.jianshu.com/p/a9f309aaa0e0" target="_blank" rel="noopener">https://www.jianshu.com/p/a9f309aaa0e0</a><br>[2] hexo yilia 主题如何添加相册:<a href="https://blog.csdn.net/qq_40651535/article/details/95061281" target="_blank" rel="noopener">https://blog.csdn.net/qq_40651535/article/details/95061281</a><br>[3] Hexo+Github实现相册功能:<a href="http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
